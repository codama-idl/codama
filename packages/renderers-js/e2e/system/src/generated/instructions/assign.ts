/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { SYSTEM_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type AssignInstruction<
  TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS,
  TAccountAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAccount extends string
        ? WritableSignerAccount<TAccountAccount> &
            IAccountSignerMeta<TAccountAccount>
        : TAccountAccount,
      ...TRemainingAccounts,
    ]
  >;

export type AssignInstructionData = {
  discriminator: number;
  programAddress: Address;
};

export type AssignInstructionDataArgs = { programAddress: Address };

export function getAssignInstructionDataEncoder(): Encoder<AssignInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU32Encoder()],
      ['programAddress', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: 1 })
  );
}

export function getAssignInstructionDataDecoder(): Decoder<AssignInstructionData> {
  return getStructDecoder([
    ['discriminator', getU32Decoder()],
    ['programAddress', getAddressDecoder()],
  ]);
}

export function getAssignInstructionDataCodec(): Codec<
  AssignInstructionDataArgs,
  AssignInstructionData
> {
  return combineCodec(
    getAssignInstructionDataEncoder(),
    getAssignInstructionDataDecoder()
  );
}

export type AssignInput<TAccountAccount extends string = string> = {
  account: TransactionSigner<TAccountAccount>;
  programAddress: AssignInstructionDataArgs['programAddress'];
};

export function getAssignInstruction<TAccountAccount extends string>(
  input: AssignInput<TAccountAccount>
): AssignInstruction<typeof SYSTEM_PROGRAM_ADDRESS, TAccountAccount> {
  // Program address.
  const programAddress = SYSTEM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    account: { value: input.account ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.account)],
    programAddress,
    data: getAssignInstructionDataEncoder().encode(
      args as AssignInstructionDataArgs
    ),
  } as AssignInstruction<typeof SYSTEM_PROGRAM_ADDRESS, TAccountAccount>;

  return instruction;
}

export type ParsedAssignInstruction<
  TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    account: TAccountMetas[0];
  };
  data: AssignInstructionData;
};

export function parseAssignInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAssignInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount(),
    },
    data: getAssignInstructionDataDecoder().decode(instruction.data),
  };
}
