//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use codama_renderers_rust_e2e_meteora::instructions::{
    AddLiquidity as AddLiquidityIxAccounts,
    AddLiquidityByStrategy as AddLiquidityByStrategyIxAccounts,
    AddLiquidityByStrategyInstructionArgs as AddLiquidityByStrategyIxData,
    AddLiquidityByStrategyOneSide as AddLiquidityByStrategyOneSideIxAccounts,
    AddLiquidityByStrategyOneSideInstructionArgs as AddLiquidityByStrategyOneSideIxData,
    AddLiquidityByWeight as AddLiquidityByWeightIxAccounts,
    AddLiquidityByWeightInstructionArgs as AddLiquidityByWeightIxData,
    AddLiquidityInstructionArgs as AddLiquidityIxData,
    AddLiquidityOneSide as AddLiquidityOneSideIxAccounts,
    AddLiquidityOneSideInstructionArgs as AddLiquidityOneSideIxData,
    AddLiquidityOneSidePrecise as AddLiquidityOneSidePreciseIxAccounts,
    AddLiquidityOneSidePreciseInstructionArgs as AddLiquidityOneSidePreciseIxData,
    ClaimFee as ClaimFeeIxAccounts, ClaimReward as ClaimRewardIxAccounts,
    ClaimRewardInstructionArgs as ClaimRewardIxData, ClosePosition as ClosePositionIxAccounts,
    ClosePresetParameter as ClosePresetParameterIxAccounts, FundReward as FundRewardIxAccounts,
    FundRewardInstructionArgs as FundRewardIxData, GoToABin as GoToABinIxAccounts,
    GoToABinInstructionArgs as GoToABinIxData,
    IncreaseOracleLength as IncreaseOracleLengthIxAccounts,
    IncreaseOracleLengthInstructionArgs as IncreaseOracleLengthIxData,
    InitializeBinArray as InitializeBinArrayIxAccounts,
    InitializeBinArrayBitmapExtension as InitializeBinArrayBitmapExtensionIxAccounts,
    InitializeBinArrayInstructionArgs as InitializeBinArrayIxData,
    InitializeCustomizablePermissionlessLbPair as InitializeCustomizablePermissionlessLbPairIxAccounts,
    InitializeCustomizablePermissionlessLbPairInstructionArgs as InitializeCustomizablePermissionlessLbPairIxData,
    InitializeLbPair as InitializeLbPairIxAccounts,
    InitializeLbPairInstructionArgs as InitializeLbPairIxData,
    InitializePermissionLbPair as InitializePermissionLbPairIxAccounts,
    InitializePermissionLbPairInstructionArgs as InitializePermissionLbPairIxData,
    InitializePosition as InitializePositionIxAccounts,
    InitializePositionByOperator as InitializePositionByOperatorIxAccounts,
    InitializePositionByOperatorInstructionArgs as InitializePositionByOperatorIxData,
    InitializePositionInstructionArgs as InitializePositionIxData,
    InitializePositionPda as InitializePositionPdaIxAccounts,
    InitializePositionPdaInstructionArgs as InitializePositionPdaIxData,
    InitializePresetParameter as InitializePresetParameterIxAccounts,
    InitializePresetParameterInstructionArgs as InitializePresetParameterIxData,
    InitializeReward as InitializeRewardIxAccounts,
    InitializeRewardInstructionArgs as InitializeRewardIxData,
    MigrateBinArray as MigrateBinArrayIxAccounts, MigratePosition as MigratePositionIxAccounts,
    RemoveAllLiquidity as RemoveAllLiquidityIxAccounts,
    RemoveLiquidity as RemoveLiquidityIxAccounts,
    RemoveLiquidityByRange as RemoveLiquidityByRangeIxAccounts,
    RemoveLiquidityByRangeInstructionArgs as RemoveLiquidityByRangeIxData,
    RemoveLiquidityInstructionArgs as RemoveLiquidityIxData,
    SetActivationPoint as SetActivationPointIxAccounts,
    SetActivationPointInstructionArgs as SetActivationPointIxData,
    SetPreActivationDuration as SetPreActivationDurationIxAccounts,
    SetPreActivationDurationInstructionArgs as SetPreActivationDurationIxData,
    SetPreActivationSwapAddress as SetPreActivationSwapAddressIxAccounts,
    SetPreActivationSwapAddressInstructionArgs as SetPreActivationSwapAddressIxData,
    Swap as SwapIxAccounts, SwapExactOut as SwapExactOutIxAccounts,
    SwapExactOutInstructionArgs as SwapExactOutIxData, SwapInstructionArgs as SwapIxData,
    SwapWithPriceImpact as SwapWithPriceImpactIxAccounts,
    SwapWithPriceImpactInstructionArgs as SwapWithPriceImpactIxData,
    TogglePairStatus as TogglePairStatusIxAccounts,
    UpdateFeeParameters as UpdateFeeParametersIxAccounts,
    UpdateFeeParametersInstructionArgs as UpdateFeeParametersIxData,
    UpdateFeesAndRewards as UpdateFeesAndRewardsIxAccounts,
    UpdatePositionOperator as UpdatePositionOperatorIxAccounts,
    UpdatePositionOperatorInstructionArgs as UpdatePositionOperatorIxData,
    UpdateRewardDuration as UpdateRewardDurationIxAccounts,
    UpdateRewardDurationInstructionArgs as UpdateRewardDurationIxData,
    UpdateRewardFunder as UpdateRewardFunderIxAccounts,
    UpdateRewardFunderInstructionArgs as UpdateRewardFunderIxData,
    WithdrawIneligibleReward as WithdrawIneligibleRewardIxAccounts,
    WithdrawIneligibleRewardInstructionArgs as WithdrawIneligibleRewardIxData,
    WithdrawProtocolFee as WithdrawProtocolFeeIxAccounts,
    WithdrawProtocolFeeInstructionArgs as WithdrawProtocolFeeIxData,
};
use codama_renderers_rust_e2e_meteora::ID;
use solana_program::pubkey::Pubkey;

/// LbClmm Instructions
#[derive(Debug)]
pub enum LbClmmProgramIx {
    InitializeLbPair(InitializeLbPairIxAccounts, InitializeLbPairIxData),
    InitializePermissionLbPair(
        InitializePermissionLbPairIxAccounts,
        InitializePermissionLbPairIxData,
    ),
    InitializeCustomizablePermissionlessLbPair(
        InitializeCustomizablePermissionlessLbPairIxAccounts,
        InitializeCustomizablePermissionlessLbPairIxData,
    ),
    InitializeBinArrayBitmapExtension(InitializeBinArrayBitmapExtensionIxAccounts),
    InitializeBinArray(InitializeBinArrayIxAccounts, InitializeBinArrayIxData),
    AddLiquidity(AddLiquidityIxAccounts, AddLiquidityIxData),
    AddLiquidityByWeight(AddLiquidityByWeightIxAccounts, AddLiquidityByWeightIxData),
    AddLiquidityByStrategy(
        AddLiquidityByStrategyIxAccounts,
        AddLiquidityByStrategyIxData,
    ),
    AddLiquidityByStrategyOneSide(
        AddLiquidityByStrategyOneSideIxAccounts,
        AddLiquidityByStrategyOneSideIxData,
    ),
    AddLiquidityOneSide(AddLiquidityOneSideIxAccounts, AddLiquidityOneSideIxData),
    RemoveLiquidity(RemoveLiquidityIxAccounts, RemoveLiquidityIxData),
    InitializePosition(InitializePositionIxAccounts, InitializePositionIxData),
    InitializePositionPda(InitializePositionPdaIxAccounts, InitializePositionPdaIxData),
    InitializePositionByOperator(
        InitializePositionByOperatorIxAccounts,
        InitializePositionByOperatorIxData,
    ),
    UpdatePositionOperator(
        UpdatePositionOperatorIxAccounts,
        UpdatePositionOperatorIxData,
    ),
    Swap(SwapIxAccounts, SwapIxData),
    SwapExactOut(SwapExactOutIxAccounts, SwapExactOutIxData),
    SwapWithPriceImpact(SwapWithPriceImpactIxAccounts, SwapWithPriceImpactIxData),
    WithdrawProtocolFee(WithdrawProtocolFeeIxAccounts, WithdrawProtocolFeeIxData),
    InitializeReward(InitializeRewardIxAccounts, InitializeRewardIxData),
    FundReward(FundRewardIxAccounts, FundRewardIxData),
    UpdateRewardFunder(UpdateRewardFunderIxAccounts, UpdateRewardFunderIxData),
    UpdateRewardDuration(UpdateRewardDurationIxAccounts, UpdateRewardDurationIxData),
    ClaimReward(ClaimRewardIxAccounts, ClaimRewardIxData),
    ClaimFee(ClaimFeeIxAccounts),
    ClosePosition(ClosePositionIxAccounts),
    UpdateFeeParameters(UpdateFeeParametersIxAccounts, UpdateFeeParametersIxData),
    IncreaseOracleLength(IncreaseOracleLengthIxAccounts, IncreaseOracleLengthIxData),
    InitializePresetParameter(
        InitializePresetParameterIxAccounts,
        InitializePresetParameterIxData,
    ),
    ClosePresetParameter(ClosePresetParameterIxAccounts),
    RemoveAllLiquidity(RemoveAllLiquidityIxAccounts),
    TogglePairStatus(TogglePairStatusIxAccounts),
    MigratePosition(MigratePositionIxAccounts),
    MigrateBinArray(MigrateBinArrayIxAccounts),
    UpdateFeesAndRewards(UpdateFeesAndRewardsIxAccounts),
    WithdrawIneligibleReward(
        WithdrawIneligibleRewardIxAccounts,
        WithdrawIneligibleRewardIxData,
    ),
    SetActivationPoint(SetActivationPointIxAccounts, SetActivationPointIxData),
    RemoveLiquidityByRange(
        RemoveLiquidityByRangeIxAccounts,
        RemoveLiquidityByRangeIxData,
    ),
    AddLiquidityOneSidePrecise(
        AddLiquidityOneSidePreciseIxAccounts,
        AddLiquidityOneSidePreciseIxData,
    ),
    GoToABin(GoToABinIxAccounts, GoToABinIxData),
    SetPreActivationDuration(
        SetPreActivationDurationIxAccounts,
        SetPreActivationDurationIxData,
    ),
    SetPreActivationSwapAddress(
        SetPreActivationSwapAddressIxAccounts,
        SetPreActivationSwapAddressIxData,
    ),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = LbClmmProgramIx;

    fn id(&self) -> std::borrow::Cow<str> {
        "LbClmm::InstructionParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<LbClmmProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        match ix_discriminator {
            [45, 154, 237, 210, 221, 15, 166, 92] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = InitializeLbPairIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[1].0))
                        .into(),
                    token_mint_x: ix.accounts[2].0.into(),
                    token_mint_y: ix.accounts[3].0.into(),
                    reserve_x: ix.accounts[4].0.into(),
                    reserve_y: ix.accounts[5].0.into(),
                    oracle: ix.accounts[6].0.into(),
                    preset_parameter: ix.accounts[7].0.into(),
                    funder: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    system_program: ix.accounts[10].0.into(),
                    rent: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                let de_ix_data: InitializeLbPairIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializeLbPair(ix_accounts, de_ix_data))
            }
            [108, 102, 213, 85, 251, 3, 53, 21] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = InitializePermissionLbPairIxAccounts {
                    base: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[2].0))
                        .into(),
                    token_mint_x: ix.accounts[3].0.into(),
                    token_mint_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    oracle: ix.accounts[7].0.into(),
                    admin: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    system_program: ix.accounts[10].0.into(),
                    rent: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                let de_ix_data: InitializePermissionLbPairIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePermissionLbPair(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [46, 39, 41, 135, 111, 183, 200, 64] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = InitializeCustomizablePermissionlessLbPairIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[1].0))
                        .into(),
                    token_mint_x: ix.accounts[2].0.into(),
                    token_mint_y: ix.accounts[3].0.into(),
                    reserve_x: ix.accounts[4].0.into(),
                    reserve_y: ix.accounts[5].0.into(),
                    oracle: ix.accounts[6].0.into(),
                    user_token_x: ix.accounts[7].0.into(),
                    funder: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    system_program: ix.accounts[10].0.into(),
                    rent: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                let de_ix_data: InitializeCustomizablePermissionlessLbPairIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializeCustomizablePermissionlessLbPair(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [47, 157, 226, 180, 12, 240, 33, 71] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = InitializeBinArrayBitmapExtensionIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: ix.accounts[1].0.into(),
                    funder: ix.accounts[2].0.into(),
                    system_program: ix.accounts[3].0.into(),
                    rent: ix.accounts[4].0.into(),
                };
                Ok(LbClmmProgramIx::InitializeBinArrayBitmapExtension(
                    ix_accounts,
                ))
            }
            [35, 86, 19, 185, 78, 212, 75, 211] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = InitializeBinArrayIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array: ix.accounts[1].0.into(),
                    funder: ix.accounts[2].0.into(),
                    system_program: ix.accounts[3].0.into(),
                };
                let de_ix_data: InitializeBinArrayIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializeBinArray(ix_accounts, de_ix_data))
            }
            [181, 157, 89, 67, 143, 182, 52, 72] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = AddLiquidityIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[2].0))
                        .into(),
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    bin_array_lower: ix.accounts[9].0.into(),
                    bin_array_upper: ix.accounts[10].0.into(),
                    sender: ix.accounts[11].0.into(),
                    token_x_program: ix.accounts[12].0.into(),
                    token_y_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: AddLiquidityIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidity(ix_accounts, de_ix_data))
            }
            [28, 140, 238, 99, 231, 162, 21, 149] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = AddLiquidityByWeightIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[2].0))
                        .into(),
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    bin_array_lower: ix.accounts[9].0.into(),
                    bin_array_upper: ix.accounts[10].0.into(),
                    sender: ix.accounts[11].0.into(),
                    token_x_program: ix.accounts[12].0.into(),
                    token_y_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: AddLiquidityByWeightIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidityByWeight(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [7, 3, 150, 127, 148, 40, 61, 200] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = AddLiquidityByStrategyIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[2].0))
                        .into(),
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    bin_array_lower: ix.accounts[9].0.into(),
                    bin_array_upper: ix.accounts[10].0.into(),
                    sender: ix.accounts[11].0.into(),
                    token_x_program: ix.accounts[12].0.into(),
                    token_y_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: AddLiquidityByStrategyIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidityByStrategy(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [41, 5, 238, 175, 100, 225, 6, 205] => {
                check_min_accounts_req(accounts_len, 12)?;
                let ix_accounts = AddLiquidityByStrategyOneSideIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[2].0))
                        .into(),
                    user_token: ix.accounts[3].0.into(),
                    reserve: ix.accounts[4].0.into(),
                    token_mint: ix.accounts[5].0.into(),
                    bin_array_lower: ix.accounts[6].0.into(),
                    bin_array_upper: ix.accounts[7].0.into(),
                    sender: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    event_authority: ix.accounts[10].0.into(),
                    program: ix.accounts[11].0.into(),
                };
                let de_ix_data: AddLiquidityByStrategyOneSideIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidityByStrategyOneSide(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [94, 155, 103, 151, 70, 95, 220, 165] => {
                check_min_accounts_req(accounts_len, 12)?;
                let ix_accounts = AddLiquidityOneSideIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[2].0))
                        .into(),
                    user_token: ix.accounts[3].0.into(),
                    reserve: ix.accounts[4].0.into(),
                    token_mint: ix.accounts[5].0.into(),
                    bin_array_lower: ix.accounts[6].0.into(),
                    bin_array_upper: ix.accounts[7].0.into(),
                    sender: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    event_authority: ix.accounts[10].0.into(),
                    program: ix.accounts[11].0.into(),
                };
                let de_ix_data: AddLiquidityOneSideIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidityOneSide(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [80, 85, 209, 72, 24, 206, 177, 108] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = RemoveLiquidityIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[2].0))
                        .into(),
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    bin_array_lower: ix.accounts[9].0.into(),
                    bin_array_upper: ix.accounts[10].0.into(),
                    sender: ix.accounts[11].0.into(),
                    token_x_program: ix.accounts[12].0.into(),
                    token_y_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: RemoveLiquidityIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::RemoveLiquidity(ix_accounts, de_ix_data))
            }
            [219, 192, 234, 71, 190, 191, 102, 80] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = InitializePositionIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    position: ix.accounts[1].0.into(),
                    lb_pair: ix.accounts[2].0.into(),
                    owner: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                    rent: ix.accounts[5].0.into(),
                    event_authority: ix.accounts[6].0.into(),
                    program: ix.accounts[7].0.into(),
                };
                let de_ix_data: InitializePositionIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePosition(ix_accounts, de_ix_data))
            }
            [46, 82, 125, 146, 85, 141, 228, 153] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = InitializePositionPdaIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    base: ix.accounts[1].0.into(),
                    position: ix.accounts[2].0.into(),
                    lb_pair: ix.accounts[3].0.into(),
                    owner: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                    rent: ix.accounts[6].0.into(),
                    event_authority: ix.accounts[7].0.into(),
                    program: ix.accounts[8].0.into(),
                };
                let de_ix_data: InitializePositionPdaIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePositionPda(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [251, 189, 190, 244, 117, 254, 35, 148] => {
                check_min_accounts_req(accounts_len, 11)?;
                let ix_accounts = InitializePositionByOperatorIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    base: ix.accounts[1].0.into(),
                    position: ix.accounts[2].0.into(),
                    lb_pair: ix.accounts[3].0.into(),
                    owner: ix.accounts[4].0.into(),
                    operator: ix.accounts[5].0.into(),
                    operator_token_x: ix.accounts[6].0.into(),
                    owner_token_x: ix.accounts[7].0.into(),
                    system_program: ix.accounts[8].0.into(),
                    event_authority: ix.accounts[9].0.into(),
                    program: ix.accounts[10].0.into(),
                };
                let de_ix_data: InitializePositionByOperatorIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePositionByOperator(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [202, 184, 103, 143, 180, 191, 116, 217] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdatePositionOperatorIxAccounts {
                    position: ix.accounts[0].0.into(),
                    owner: ix.accounts[1].0.into(),
                    event_authority: ix.accounts[2].0.into(),
                    program: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdatePositionOperatorIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdatePositionOperator(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [248, 198, 158, 145, 225, 117, 135, 200] => {
                check_min_accounts_req(accounts_len, 15)?;
                let ix_accounts = SwapIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[1].0))
                        .into(),
                    reserve_x: ix.accounts[2].0.into(),
                    reserve_y: ix.accounts[3].0.into(),
                    user_token_in: ix.accounts[4].0.into(),
                    user_token_out: ix.accounts[5].0.into(),
                    token_x_mint: ix.accounts[6].0.into(),
                    token_y_mint: ix.accounts[7].0.into(),
                    oracle: ix.accounts[8].0.into(),
                    host_fee_in: Some(Pubkey::new_from_array(ix.accounts[9].0)).into(),
                    user: ix.accounts[10].0.into(),
                    token_x_program: ix.accounts[11].0.into(),
                    token_y_program: ix.accounts[12].0.into(),
                    event_authority: ix.accounts[13].0.into(),
                    program: ix.accounts[14].0.into(),
                };
                let de_ix_data: SwapIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::Swap(ix_accounts, de_ix_data))
            }
            [250, 73, 101, 33, 38, 207, 75, 184] => {
                check_min_accounts_req(accounts_len, 15)?;
                let ix_accounts = SwapExactOutIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[1].0))
                        .into(),
                    reserve_x: ix.accounts[2].0.into(),
                    reserve_y: ix.accounts[3].0.into(),
                    user_token_in: ix.accounts[4].0.into(),
                    user_token_out: ix.accounts[5].0.into(),
                    token_x_mint: ix.accounts[6].0.into(),
                    token_y_mint: ix.accounts[7].0.into(),
                    oracle: ix.accounts[8].0.into(),
                    host_fee_in: Some(Pubkey::new_from_array(ix.accounts[9].0)).into(),
                    user: ix.accounts[10].0.into(),
                    token_x_program: ix.accounts[11].0.into(),
                    token_y_program: ix.accounts[12].0.into(),
                    event_authority: ix.accounts[13].0.into(),
                    program: ix.accounts[14].0.into(),
                };
                let de_ix_data: SwapExactOutIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SwapExactOut(ix_accounts, de_ix_data))
            }
            [56, 173, 230, 208, 173, 228, 156, 205] => {
                check_min_accounts_req(accounts_len, 15)?;
                let ix_accounts = SwapWithPriceImpactIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[1].0))
                        .into(),
                    reserve_x: ix.accounts[2].0.into(),
                    reserve_y: ix.accounts[3].0.into(),
                    user_token_in: ix.accounts[4].0.into(),
                    user_token_out: ix.accounts[5].0.into(),
                    token_x_mint: ix.accounts[6].0.into(),
                    token_y_mint: ix.accounts[7].0.into(),
                    oracle: ix.accounts[8].0.into(),
                    host_fee_in: Some(Pubkey::new_from_array(ix.accounts[9].0)).into(),
                    user: ix.accounts[10].0.into(),
                    token_x_program: ix.accounts[11].0.into(),
                    token_y_program: ix.accounts[12].0.into(),
                    event_authority: ix.accounts[13].0.into(),
                    program: ix.accounts[14].0.into(),
                };
                let de_ix_data: SwapWithPriceImpactIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SwapWithPriceImpact(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [158, 201, 158, 189, 33, 93, 162, 103] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = WithdrawProtocolFeeIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    reserve_x: ix.accounts[1].0.into(),
                    reserve_y: ix.accounts[2].0.into(),
                    token_x_mint: ix.accounts[3].0.into(),
                    token_y_mint: ix.accounts[4].0.into(),
                    receiver_token_x: ix.accounts[5].0.into(),
                    receiver_token_y: ix.accounts[6].0.into(),
                    token_x_program: ix.accounts[7].0.into(),
                    token_y_program: ix.accounts[8].0.into(),
                };
                let de_ix_data: WithdrawProtocolFeeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::WithdrawProtocolFee(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [95, 135, 192, 196, 242, 129, 230, 68] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = InitializeRewardIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    reward_vault: ix.accounts[1].0.into(),
                    reward_mint: ix.accounts[2].0.into(),
                    admin: ix.accounts[3].0.into(),
                    token_program: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                    rent: ix.accounts[6].0.into(),
                    event_authority: ix.accounts[7].0.into(),
                    program: ix.accounts[8].0.into(),
                };
                let de_ix_data: InitializeRewardIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializeReward(ix_accounts, de_ix_data))
            }
            [188, 50, 249, 165, 93, 151, 38, 63] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = FundRewardIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    reward_vault: ix.accounts[1].0.into(),
                    reward_mint: ix.accounts[2].0.into(),
                    funder_token_account: ix.accounts[3].0.into(),
                    funder: ix.accounts[4].0.into(),
                    bin_array: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                    event_authority: ix.accounts[7].0.into(),
                    program: ix.accounts[8].0.into(),
                };
                let de_ix_data: FundRewardIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::FundReward(ix_accounts, de_ix_data))
            }
            [211, 28, 48, 32, 215, 160, 35, 23] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdateRewardFunderIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    event_authority: ix.accounts[2].0.into(),
                    program: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdateRewardFunderIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdateRewardFunder(ix_accounts, de_ix_data))
            }
            [138, 174, 196, 169, 213, 235, 254, 107] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = UpdateRewardDurationIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    bin_array: ix.accounts[2].0.into(),
                    event_authority: ix.accounts[3].0.into(),
                    program: ix.accounts[4].0.into(),
                };
                let de_ix_data: UpdateRewardDurationIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdateRewardDuration(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [149, 95, 181, 242, 94, 90, 158, 162] => {
                check_min_accounts_req(accounts_len, 11)?;
                let ix_accounts = ClaimRewardIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    position: ix.accounts[1].0.into(),
                    bin_array_lower: ix.accounts[2].0.into(),
                    bin_array_upper: ix.accounts[3].0.into(),
                    sender: ix.accounts[4].0.into(),
                    reward_vault: ix.accounts[5].0.into(),
                    reward_mint: ix.accounts[6].0.into(),
                    user_token_account: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                    event_authority: ix.accounts[9].0.into(),
                    program: ix.accounts[10].0.into(),
                };
                let de_ix_data: ClaimRewardIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::ClaimReward(ix_accounts, de_ix_data))
            }
            [169, 32, 79, 137, 136, 232, 70, 137] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = ClaimFeeIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    position: ix.accounts[1].0.into(),
                    bin_array_lower: ix.accounts[2].0.into(),
                    bin_array_upper: ix.accounts[3].0.into(),
                    sender: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    user_token_x: ix.accounts[7].0.into(),
                    user_token_y: ix.accounts[8].0.into(),
                    token_x_mint: ix.accounts[9].0.into(),
                    token_y_mint: ix.accounts[10].0.into(),
                    token_program: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                Ok(LbClmmProgramIx::ClaimFee(ix_accounts))
            }
            [123, 134, 81, 0, 49, 68, 98, 98] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = ClosePositionIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_lower: ix.accounts[2].0.into(),
                    bin_array_upper: ix.accounts[3].0.into(),
                    sender: ix.accounts[4].0.into(),
                    rent_receiver: ix.accounts[5].0.into(),
                    event_authority: ix.accounts[6].0.into(),
                    program: ix.accounts[7].0.into(),
                };
                Ok(LbClmmProgramIx::ClosePosition(ix_accounts))
            }
            [128, 128, 208, 91, 246, 53, 31, 176] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdateFeeParametersIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    event_authority: ix.accounts[2].0.into(),
                    program: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdateFeeParametersIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdateFeeParameters(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [190, 61, 125, 87, 103, 79, 158, 173] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = IncreaseOracleLengthIxAccounts {
                    oracle: ix.accounts[0].0.into(),
                    funder: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                    event_authority: ix.accounts[3].0.into(),
                    program: ix.accounts[4].0.into(),
                };
                let de_ix_data: IncreaseOracleLengthIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::IncreaseOracleLength(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [66, 188, 71, 211, 98, 109, 14, 186] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = InitializePresetParameterIxAccounts {
                    preset_parameter: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                    rent: ix.accounts[3].0.into(),
                };
                let de_ix_data: InitializePresetParameterIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePresetParameter(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [4, 148, 145, 100, 134, 26, 181, 61] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = ClosePresetParameterIxAccounts {
                    preset_parameter: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    rent_receiver: ix.accounts[2].0.into(),
                };
                Ok(LbClmmProgramIx::ClosePresetParameter(ix_accounts))
            }
            [10, 51, 61, 35, 112, 105, 24, 85] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = RemoveAllLiquidityIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[2].0))
                        .into(),
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    bin_array_lower: ix.accounts[9].0.into(),
                    bin_array_upper: ix.accounts[10].0.into(),
                    sender: ix.accounts[11].0.into(),
                    token_x_program: ix.accounts[12].0.into(),
                    token_y_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                Ok(LbClmmProgramIx::RemoveAllLiquidity(ix_accounts))
            }
            [61, 115, 52, 23, 46, 13, 31, 144] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = TogglePairStatusIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                };
                Ok(LbClmmProgramIx::TogglePairStatus(ix_accounts))
            }
            [15, 132, 59, 50, 199, 6, 251, 46] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = MigratePositionIxAccounts {
                    position_v2: ix.accounts[0].0.into(),
                    position_v1: ix.accounts[1].0.into(),
                    lb_pair: ix.accounts[2].0.into(),
                    bin_array_lower: ix.accounts[3].0.into(),
                    bin_array_upper: ix.accounts[4].0.into(),
                    owner: ix.accounts[5].0.into(),
                    system_program: ix.accounts[6].0.into(),
                    rent_receiver: ix.accounts[7].0.into(),
                    event_authority: ix.accounts[8].0.into(),
                    program: ix.accounts[9].0.into(),
                };
                Ok(LbClmmProgramIx::MigratePosition(ix_accounts))
            }
            [17, 23, 159, 211, 101, 184, 41, 241] => {
                check_min_accounts_req(accounts_len, 1)?;
                let ix_accounts = MigrateBinArrayIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                };
                Ok(LbClmmProgramIx::MigrateBinArray(ix_accounts))
            }
            [154, 230, 250, 13, 236, 209, 75, 223] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = UpdateFeesAndRewardsIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_lower: ix.accounts[2].0.into(),
                    bin_array_upper: ix.accounts[3].0.into(),
                    owner: ix.accounts[4].0.into(),
                };
                Ok(LbClmmProgramIx::UpdateFeesAndRewards(ix_accounts))
            }
            [148, 206, 42, 195, 247, 49, 103, 8] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = WithdrawIneligibleRewardIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    reward_vault: ix.accounts[1].0.into(),
                    reward_mint: ix.accounts[2].0.into(),
                    funder_token_account: ix.accounts[3].0.into(),
                    funder: ix.accounts[4].0.into(),
                    bin_array: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                    event_authority: ix.accounts[7].0.into(),
                    program: ix.accounts[8].0.into(),
                };
                let de_ix_data: WithdrawIneligibleRewardIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::WithdrawIneligibleReward(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [91, 249, 15, 165, 26, 129, 254, 125] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SetActivationPointIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                };
                let de_ix_data: SetActivationPointIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SetActivationPoint(ix_accounts, de_ix_data))
            }
            [26, 82, 102, 152, 240, 74, 105, 26] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = RemoveLiquidityByRangeIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[2].0))
                        .into(),
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    bin_array_lower: ix.accounts[9].0.into(),
                    bin_array_upper: ix.accounts[10].0.into(),
                    sender: ix.accounts[11].0.into(),
                    token_x_program: ix.accounts[12].0.into(),
                    token_y_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: RemoveLiquidityByRangeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::RemoveLiquidityByRange(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [161, 194, 103, 84, 171, 71, 250, 154] => {
                check_min_accounts_req(accounts_len, 12)?;
                let ix_accounts = AddLiquidityOneSidePreciseIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[2].0))
                        .into(),
                    user_token: ix.accounts[3].0.into(),
                    reserve: ix.accounts[4].0.into(),
                    token_mint: ix.accounts[5].0.into(),
                    bin_array_lower: ix.accounts[6].0.into(),
                    bin_array_upper: ix.accounts[7].0.into(),
                    sender: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    event_authority: ix.accounts[10].0.into(),
                    program: ix.accounts[11].0.into(),
                };
                let de_ix_data: AddLiquidityOneSidePreciseIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidityOneSidePrecise(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [146, 72, 174, 224, 40, 253, 84, 174] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = GoToABinIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: Some(Pubkey::new_from_array(ix.accounts[1].0))
                        .into(),
                    from_bin_array: Some(Pubkey::new_from_array(ix.accounts[2].0)).into(),
                    to_bin_array: Some(Pubkey::new_from_array(ix.accounts[3].0)).into(),
                    event_authority: ix.accounts[4].0.into(),
                    program: ix.accounts[5].0.into(),
                };
                let de_ix_data: GoToABinIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::GoToABin(ix_accounts, de_ix_data))
            }
            [165, 61, 201, 244, 130, 159, 22, 100] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SetPreActivationDurationIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    creator: ix.accounts[1].0.into(),
                };
                let de_ix_data: SetPreActivationDurationIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SetPreActivationDuration(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [57, 139, 47, 123, 216, 80, 223, 10] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SetPreActivationSwapAddressIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    creator: ix.accounts[1].0.into(),
                };
                let de_ix_data: SetPreActivationSwapAddressIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SetPreActivationSwapAddress(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        }
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}
