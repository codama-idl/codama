//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>

use super::write_bytes;
use super::UNINIT_BYTE;
use core::slice::from_raw_parts;
use pinocchio::account_info::AccountInfo;
use pinocchio::cpi::invoke_signed;
use pinocchio::instruction::AccountMeta;
use pinocchio::instruction::Instruction;
use pinocchio::instruction::Signer;
use pinocchio::pubkey::Pubkey;
use pinocchio::ProgramResult;

/// Helper for cross-program invocations of `assign` instruction.
pub struct Assign<'a, 'b> {
    pub account: &'a AccountInfo,
    pub program_address: &'b Pubkey,
}

impl Assign<'_, '_> {
    #[inline(always)]
    pub fn invoke(&self) -> ProgramResult {
        self.invoke_signed(&[])
    }

    pub fn invoke_signed(&self, signers: &[Signer]) -> ProgramResult {
        // account metas
        let account_metas: [AccountMeta; 1] = [AccountMeta::new(self.account.key(), true, true)];

        let mut uninit_data = [UNINIT_BYTE; 36];
        write_bytes(&mut uninit_data[0..4], &1u32.to_le_bytes());
        write_bytes(&mut uninit_data[4..36], self.program_address.as_ref());
        let data = unsafe { from_raw_parts(uninit_data.as_ptr() as _, 36) };

        let instruction = Instruction {
            program_id: &crate::ID,
            accounts: &account_metas,
            data,
        };

        invoke_signed(&instruction, &[&self.account], signers)
    }
}
