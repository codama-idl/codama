//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>

use super::write_bytes;
use super::UNINIT_BYTE;
use core::slice::from_raw_parts;
use pinocchio::account_info::AccountInfo;
use pinocchio::cpi::invoke_signed;
use pinocchio::instruction::AccountMeta;
use pinocchio::instruction::Instruction;
use pinocchio::instruction::Signer;
use pinocchio::ProgramResult;

/// Helper for cross-program invocations of `withdraw_nonce_account` instruction.
pub struct WithdrawNonceAccount<'a> {
    pub nonce_account: &'a AccountInfo,
    pub recipient_account: &'a AccountInfo,
    pub recent_blockhashes_sysvar: &'a AccountInfo,
    pub rent_sysvar: &'a AccountInfo,
    pub nonce_authority: &'a AccountInfo,
    pub withdraw_amount: u64,
}

impl WithdrawNonceAccount<'_> {
    #[inline(always)]
    pub fn invoke(&self) -> ProgramResult {
        self.invoke_signed(&[])
    }

    pub fn invoke_signed(&self, signers: &[Signer]) -> ProgramResult {
        // account metas
        let account_metas: [AccountMeta; 5] = [
            AccountMeta::new(self.nonce_account.key(), true, false),
            AccountMeta::new(self.recipient_account.key(), true, false),
            AccountMeta::new(self.recent_blockhashes_sysvar.key(), false, false),
            AccountMeta::new(self.rent_sysvar.key(), false, false),
            AccountMeta::new(self.nonce_authority.key(), false, true),
        ];

        let mut uninit_data = [UNINIT_BYTE; 12];
        write_bytes(&mut uninit_data[0..4], &5u32.to_le_bytes());
        write_bytes(&mut uninit_data[4..12], &self.withdraw_amount.to_le_bytes());
        let data = unsafe { from_raw_parts(uninit_data.as_ptr() as _, 12) };

        let instruction = Instruction {
            program_id: &crate::ID,
            accounts: &account_metas,
            data,
        };

        invoke_signed(
            &instruction,
            &[
                &self.nonce_account,
                &self.recipient_account,
                &self.recent_blockhashes_sysvar,
                &self.rent_sysvar,
                &self.nonce_authority,
            ],
            signers,
        )
    }
}
