//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>

use pinocchio::cpi::invoke_signed;
use pinocchio::instruction::AccountMeta;
use pinocchio::instruction::Instruction;
use pinocchio::instruction::Signer;
use pinocchio::ProgramResult;

/// Helper for cross-program invocations of `instruction4` instruction.
pub struct Instruction4 {
    pub my_argument: u64,
}

impl Instruction4 {
    #[inline(always)]
    pub fn invoke(&self) -> ProgramResult {
        self.invoke_signed(&[])
    }

    pub fn invoke_signed(&self, signers: &[Signer]) -> ProgramResult {
        // account metas
        let account_metas: [AccountMeta; 0] = [];

        let data = &self.my_argument.to_le_bytes();

        let instruction = Instruction {
            program_id: &crate::ID,
            accounts: &account_metas,
            data,
        };

        invoke_signed(&instruction, &[], signers)
    }
}
