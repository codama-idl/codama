//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>

use super::write_bytes;
use super::UNINIT_BYTE;
use core::slice::from_raw_parts;
use pinocchio::account_info::AccountInfo;
use pinocchio::cpi::invoke_signed;
use pinocchio::instruction::AccountMeta;
use pinocchio::instruction::Instruction;
use pinocchio::instruction::Signer;
use pinocchio::pubkey::Pubkey;
use pinocchio::ProgramResult;

/// `create_account` CPI helper.
pub struct CreateAccount<'a, 'b> {
    pub payer: &'a AccountInfo,
    pub new_account: &'a AccountInfo,
    pub lamports: u64,
    pub space: u64,
    pub program_address: &'b Pubkey,
}

impl CreateAccount<'_, '_> {
    #[inline(always)]
    pub fn invoke(&self) -> ProgramResult {
        self.invoke_signed(&[])
    }

    pub fn invoke_signed(&self, signers: &[Signer]) -> ProgramResult {
        // account metas
        let account_metas: [AccountMeta; 2] = [
            AccountMeta::new(self.payer.key(), true, true),
            AccountMeta::new(self.new_account.key(), true, true),
        ];

        let mut uninit_data = [UNINIT_BYTE; 52];
        write_bytes(&mut uninit_data[0..4], &0u32.to_le_bytes());
        write_bytes(&mut uninit_data[4..12], &self.lamports.to_le_bytes());
        write_bytes(&mut uninit_data[12..20], &self.space.to_le_bytes());
        write_bytes(&mut uninit_data[20..52], self.program_address.as_ref());
        let data = unsafe { from_raw_parts(uninit_data.as_ptr() as _, 52) };

        let instruction = Instruction {
            program_id: &crate::ID,
            accounts: &account_metas,
            data,
        };

        invoke_signed(&instruction, &[&self.payer, &self.new_account], signers)
    }
}
