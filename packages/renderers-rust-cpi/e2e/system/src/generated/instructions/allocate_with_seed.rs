//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>

use super::write_bytes;
use super::UNINIT_BYTE;
use core::slice::from_raw_parts;
use pinocchio::account_info::AccountInfo;
use pinocchio::cpi::invoke_signed;
use pinocchio::instruction::AccountMeta;
use pinocchio::instruction::Instruction;
use pinocchio::instruction::Signer;
use pinocchio::pubkey::Pubkey;
use pinocchio::ProgramResult;

/// Helper for cross-program invocations of `allocate_with_seed` instruction.
pub struct AllocateWithSeed<'a, 'b, 'c, 'd> {
    pub new_account: &'a AccountInfo,
    pub base_account: &'a AccountInfo,
    pub base: &'b Pubkey,
    pub seed: &'c String,
    pub space: u64,
    pub program_address: &'d Pubkey,
}

impl AllocateWithSeed<'_, '_, '_, '_> {
    #[inline(always)]
    pub fn invoke(&self) -> ProgramResult {
        self.invoke_signed(&[])
    }

    pub fn invoke_signed(&self, signers: &[Signer]) -> ProgramResult {
        // account metas
        let account_metas: [AccountMeta; 2] = [
            AccountMeta::new(self.new_account.key(), true, false),
            AccountMeta::new(self.base_account.key(), false, true),
        ];

        let mut uninit_data = [UNINIT_BYTE; 0];
        write_bytes(&mut uninit_data[0..4], &9u32.to_le_bytes());
        write_bytes(&mut uninit_data[4..36], self.base.as_ref());

        write_bytes(&mut uninit_data[0..8], &self.space.to_le_bytes());
        write_bytes(&mut uninit_data[8..40], self.program_address.as_ref());
        let data = unsafe { from_raw_parts(uninit_data.as_ptr() as _, 40) };

        let instruction = Instruction {
            program_id: &crate::ID,
            accounts: &account_metas,
            data,
        };

        invoke_signed(
            &instruction,
            &[&self.new_account, &self.base_account],
            signers,
        )
    }
}
