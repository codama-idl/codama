//! This code was AUTOGENERATED using the Codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun Codama to update it.
//!
//! <https://github.com/codama-idl/codama>

use super::write_bytes;
use super::UNINIT_BYTE;
use core::slice::from_raw_parts;
use pinocchio::account_info::AccountInfo;
use pinocchio::cpi::invoke_signed;
use pinocchio::instruction::AccountMeta;
use pinocchio::instruction::Instruction;
use pinocchio::instruction::Signer;
use pinocchio::ProgramResult;

/// `transfer_sol` CPI helper.
pub struct TransferSol<'a> {
    pub source: &'a AccountInfo,
    pub destination: &'a AccountInfo,
    pub amount: u64,
}

impl TransferSol<'_> {
    #[inline(always)]
    pub fn invoke(&self) -> ProgramResult {
        self.invoke_signed(&[])
    }

    pub fn invoke_signed(&self, signers: &[Signer]) -> ProgramResult {
        // account metas
        let account_metas: [AccountMeta; 2] = [
            AccountMeta::new(self.source.key(), true, true),
            AccountMeta::new(self.destination.key(), true, false),
        ];

        let mut uninit_data = [UNINIT_BYTE; 12];
        write_bytes(&mut uninit_data[0..4], &2u32.to_le_bytes());
        write_bytes(&mut uninit_data[4..12], &self.amount.to_le_bytes());
        let data = unsafe { from_raw_parts(uninit_data.as_ptr() as _, 12) };

        let instruction = Instruction {
            program_id: &crate::ID,
            accounts: &account_metas,
            data,
        };

        invoke_signed(&instruction, &[&self.source, &self.destination], signers)
    }
}
