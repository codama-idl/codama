
{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{{ imports }}

{% for variant in variants %}
class {{variant.name | pascalCase}}JSON(typing.TypedDict):
    kind: typing.Literal["{{variant.name | pascalCase}}"]


@dataclass
class {{variant.name | pascalCase}}:
    discriminator: typing.ClassVar = {{ loop.index0 }}
    @classmethod
    def to_json(cls) -> {{variant.name | pascalCase}}JSON:
        return {{variant.name | pascalCase}}JSON(
            kind="{{variant.name | pascalCase}}",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "{{variant.name | pascalCase}}": {},
        }



{% endfor %}


{{typeName | pascalCase}}Kind = typing.Union[
{% for variant in variants %}
{{variant.name | pascalCase}},
{% endfor %}]
{{typeName | pascalCase}}JSON = typing.Union[
{% for variant in variants %}
{{variant.name | pascalCase}}JSON,
{% endfor %}]

def from_decoded(obj: dict) -> {{typeName | pascalCase}}Kind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
{% for variant in variants %}
    if "{{variant.name | pascalCase}}" in obj:
      return {{variant.name | pascalCase}}()
{% endfor %}
    raise ValueError("Invalid enum object")

def from_json(obj: {{typeName | pascalCase}}JSON) -> {{typeName | pascalCase}}Kind:
{% for variant in variants %}
    if obj["kind"] == "{{variant.name | pascalCase}}":
        return {{variant.name | pascalCase}}()
{% endfor %}
    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
{% for variant in variants %}
"{{variant.name | pascalCase}}" / borsh.CStruct(),
{% endfor %}
)
{% endblock %}
