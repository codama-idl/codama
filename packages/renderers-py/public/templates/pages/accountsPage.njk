{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{{ imports }}


class {{accountName | pascalCase}}JSON(typing.TypedDict):
{% for field in fieldsJSON_assignment.renders %}
    {{field}}
{% endfor %}

@dataclass
class {{ accountName | pascalCase}}:
    #fields
{%for field in fields_interface_params.renders %}
    {{field}}
{% endfor %}

{%if discriminator_assignment.len >0 %}
    discriminator: typing.ClassVar = {{discriminator_assignment.renders}}
    DISCRIMINATOR_SIZE: int = {{discriminator_assignment.len}}
{% endif %}

    layout: typing.ClassVar = borsh.CStruct(
    {% for field in fieldsLayout.renders %}
    {{field}},
    {% endfor %}
    )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = {{program.name | snakeCase | toUpperCase}}_PROGRAM_ADDRESS,
    ) -> typing.Optional["{{accountName | pascalCase}}"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = {{program.name | snakeCase | toUpperCase}}_PROGRAM_ADDRESS,
    ) -> typing.List[typing.Optional["{{accountName | pascalCase}}"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["{{accountName | pascalCase}}"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "{{accountName | pascalCase}}":
{%if discriminator_assignment.len >0 %}
        if data[:cls.DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = {{accountName | pascalCase}}.layout.parse(data[cls.DISCRIMINATOR_SIZE:])
{% else %}
        dec = {{accountName | pascalCase}}.layout.parse(data)
{% endif %}
        return cls(
        {% for field in fieldsDecode.renders %}
        {{field}},
        {% endfor %}
        )

    def to_json(self) -> {{accountName | pascalCase}}JSON:
        return {
        {% for field in fieldsToJSON.renders %}
        {{field}},
        {% endfor %}
        }

    @classmethod
    def from_json(cls, obj: {{accountName | pascalCase}}JSON) -> "{{accountName | pascalCase}}":
        return cls(
        {% for field in fieldsFromJSON.renders %}
        {{field}},
        {% endfor %}
        )




{% endblock %}
