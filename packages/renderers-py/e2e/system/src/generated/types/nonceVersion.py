'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;


class LegacyJSON(typing.TypedDict):
    kind: typing.Literal["Legacy"]


@dataclass
class Legacy:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> LegacyJSON:
        return LegacyJSON(
            kind="Legacy",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Legacy": {},
        }




class CurrentJSON(typing.TypedDict):
    kind: typing.Literal["Current"]


@dataclass
class Current:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> CurrentJSON:
        return CurrentJSON(
            kind="Current",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Current": {},
        }





NonceVersionKind = typing.Union[
    Legacy,
    Current,
]
NonceVersionJSON = typing.Union[
    LegacyJSON,
    CurrentJSON,
]

def from_decoded(obj: dict) -> NonceVersionKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Legacy" in obj:
      return Legacy()
    if "Current" in obj:
      return Current()
    raise ValueError("Invalid enum object")

def from_json(obj: NonceVersionJSON) -> NonceVersionKind:
    if obj["kind"] == "Legacy":
        return Legacy()

    if obj["kind"] == "Current":
        return Current()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Legacy" / borsh.CStruct(),
"Current" / borsh.CStruct(),
)
