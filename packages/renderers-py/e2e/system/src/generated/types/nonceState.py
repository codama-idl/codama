'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;


class UninitializedJSON(typing.TypedDict):
    kind: typing.Literal["Uninitialized"]


@dataclass
class Uninitialized:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> UninitializedJSON:
        return UninitializedJSON(
            kind="Uninitialized",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Uninitialized": {},
        }




class InitializedJSON(typing.TypedDict):
    kind: typing.Literal["Initialized"]


@dataclass
class Initialized:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> InitializedJSON:
        return InitializedJSON(
            kind="Initialized",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Initialized": {},
        }





NonceStateKind = typing.Union[
    Uninitialized,
    Initialized,
]
NonceStateJSON = typing.Union[
    UninitializedJSON,
    InitializedJSON,
]

def from_decoded(obj: dict) -> NonceStateKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Uninitialized" in obj:
      return Uninitialized()
    if "Initialized" in obj:
      return Initialized()
    raise ValueError("Invalid enum object")

def from_json(obj: NonceStateJSON) -> NonceStateKind:
    if obj["kind"] == "Uninitialized":
        return Uninitialized()

    if obj["kind"] == "Initialized":
        return Initialized()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Uninitialized" / borsh.CStruct(),
"Initialized" / borsh.CStruct(),
)
