'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import typing;
from anchorpy.error import ProgramError;

class AccountAlreadyInUse(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            0, ""
        )

    code = 0
    name = "AccountAlreadyInUse"
    msg = ""
class ResultWithNegativeLamports(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            1, ""
        )

    code = 1
    name = "ResultWithNegativeLamports"
    msg = ""
class InvalidProgramId(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            2, ""
        )

    code = 2
    name = "InvalidProgramId"
    msg = ""
class InvalidAccountDataLength(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            3, ""
        )

    code = 3
    name = "InvalidAccountDataLength"
    msg = ""
class MaxSeedLengthExceeded(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            4, ""
        )

    code = 4
    name = "MaxSeedLengthExceeded"
    msg = ""
class AddressWithSeedMismatch(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            5, ""
        )

    code = 5
    name = "AddressWithSeedMismatch"
    msg = ""
class NonceNoRecentBlockhashes(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6, ""
        )

    code = 6
    name = "NonceNoRecentBlockhashes"
    msg = ""
class NonceBlockhashNotExpired(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            7, ""
        )

    code = 7
    name = "NonceBlockhashNotExpired"
    msg = ""
class NonceUnexpectedBlockhashValue(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            8, ""
        )

    code = 8
    name = "NonceUnexpectedBlockhashValue"
    msg = ""

CustomError = typing.Union[
    AccountAlreadyInUse,
    ResultWithNegativeLamports,
    InvalidProgramId,
    InvalidAccountDataLength,
    MaxSeedLengthExceeded,
    AddressWithSeedMismatch,
    NonceNoRecentBlockhashes,
    NonceBlockhashNotExpired,
    NonceUnexpectedBlockhashValue,
 ]
CUSTOM_ERROR_MAP: dict[int, CustomError] = {
    0: AccountAlreadyInUse(),
    1: ResultWithNegativeLamports(),
    2: InvalidProgramId(),
    3: InvalidAccountDataLength(),
    4: MaxSeedLengthExceeded(),
    5: AddressWithSeedMismatch(),
    6: NonceNoRecentBlockhashes(),
    7: NonceBlockhashNotExpired(),
    8: NonceUnexpectedBlockhashValue(),
}

def from_code(code: int) -> typing.Optional[CustomError]:
    maybe_err = CUSTOM_ERROR_MAP.get(code)
    if maybe_err is None:
        return None
    return maybe_err

