'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from anchorpy.error import AccountInvalidDiscriminator
from anchorpy.utils.rpc import get_multiple_accounts
from dataclasses import dataclass
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solders.pubkey import Pubkey as SolPubkey
from .. import types
from ..program_id import PROGRAM_ID


class NonceJSON(typing.TypedDict):
    version: types.nonceVersion.NonceVersionJSON
    state: types.nonceState.NonceStateJSON
    authority: str
    blockhash: str
    lamportsPerSignature: int

@dataclass
class Nonce:
    #fields
    version: types.nonceVersion.NonceVersionKind
    state: types.nonceState.NonceStateKind
    authority: SolPubkey
    blockhash: SolPubkey
    lamportsPerSignature: int


    layout: typing.ClassVar = borsh.CStruct(
        "version" /types.nonceVersion.layout,
        "state" /types.nonceState.layout,
        "authority" /BorshPubkey,
        "blockhash" /BorshPubkey,
        "lamportsPerSignature" /borsh.U64,
        )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["Nonce"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["Nonce"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["Nonce"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "Nonce":
        dec = Nonce.layout.parse(data)
        return cls(
                version=types.nonceVersion.from_decoded(dec.version),
                state=types.nonceState.from_decoded(dec.state),
                authority=dec.authority,
                blockhash=dec.blockhash,
                lamportsPerSignature=dec.lamportsPerSignature,
                )

    def to_json(self) -> NonceJSON:
        return {
                "version": self.version.to_json(),
                "state": self.state.to_json(),
                "authority": str(self.authority),
                "blockhash": str(self.blockhash),
                "lamportsPerSignature": self.lamportsPerSignature,
                }

    @classmethod
    def from_json(cls, obj: NonceJSON) -> "Nonce":
        return cls(
                version=types.nonceVersion.from_json(obj["version"]),
                state=types.nonceState.from_json(obj["state"]),
                authority=SolPubkey.from_string(obj["authority"]),
                blockhash=SolPubkey.from_string(obj["blockhash"]),
                lamportsPerSignature=obj["lamportsPerSignature"],
                )




