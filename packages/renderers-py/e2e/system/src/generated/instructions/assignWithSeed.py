'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from ..program_id import PROGRAM_ID;
class AssignWithSeedArgs(typing.TypedDict):
    base:SolPubkey
    seed:str
    programAddress:SolPubkey


layout = borsh.CStruct(
    "base" /BorshPubkey,
    "seed" /borsh.String,
    "programAddress" /BorshPubkey,
    )


class AssignWithSeedAccounts(typing.TypedDict):
    account:SolPubkey
    baseAccount:SolPubkey

def AssignWithSeed(
    args: AssignWithSeedArgs,
    accounts: AssignWithSeedAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["account"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["baseAccount"], is_signer=True, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xa"
    encoded_args = layout.build({
        "base":args["base"],
        "seed":args["seed"],
        "programAddress":args["programAddress"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



