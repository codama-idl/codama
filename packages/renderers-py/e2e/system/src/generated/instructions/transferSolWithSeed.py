'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class TransferSolWithSeedArgs(typing.TypedDict):
    amount:int
    fromSeed:str
    fromOwner:SolPubkey


layout = borsh.CStruct(
    "amount" /borsh.U64,
    "fromSeed" /borsh.String,
    "fromOwner" /BorshPubkey,
    )


class TransferSolWithSeedAccounts(typing.TypedDict):
    source:SolPubkey
    baseAccount:SolPubkey
    destination:SolPubkey

def TransferSolWithSeed(
    args: TransferSolWithSeedArgs,
    accounts: TransferSolWithSeedAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["source"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["baseAccount"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["destination"], is_signer=False, is_writable=True),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x0b\x00\x00\x00"
    encoded_args = layout.build({
        "amount":args["amount"],
        "fromSeed":args["fromSeed"],
        "fromOwner":args["fromOwner"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



