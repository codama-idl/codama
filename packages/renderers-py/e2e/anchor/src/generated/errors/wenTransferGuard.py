'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import typing
from anchorpy.error import ProgramError

class CpiRuleEnforcementFailed(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6000, ""
        )

    code = 6000
    name = "CpiRuleEnforcementFailed"
    msg = ""
class TransferAmountRuleEnforceFailed(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6001, ""
        )

    code = 6001
    name = "TransferAmountRuleEnforceFailed"
    msg = ""
class MetadataFieldDoesNotExist(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6002, ""
        )

    code = 6002
    name = "MetadataFieldDoesNotExist"
    msg = ""
class MetadataFieldDoesNotPass(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6003, ""
        )

    code = 6003
    name = "MetadataFieldDoesNotPass"
    msg = ""
class GuardTokenAmountShouldBeAtLeastOne(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6004, ""
        )

    code = 6004
    name = "GuardTokenAmountShouldBeAtLeastOne"
    msg = ""
class NotOwnedByToken2022Program(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6005, ""
        )

    code = 6005
    name = "NotOwnedByToken2022Program"
    msg = ""
class MustBeInitializedByTransferHookAuthority(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6006, ""
        )

    code = 6006
    name = "MustBeInitializedByTransferHookAuthority"
    msg = ""
class MintAssignedTransferHookProgramIsNotThisOne(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6007, ""
        )

    code = 6007
    name = "MintAssignedTransferHookProgramIsNotThisOne"
    msg = ""

CustomError = typing.Union[
    CpiRuleEnforcementFailed,
    TransferAmountRuleEnforceFailed,
    MetadataFieldDoesNotExist,
    MetadataFieldDoesNotPass,
    GuardTokenAmountShouldBeAtLeastOne,
    NotOwnedByToken2022Program,
    MustBeInitializedByTransferHookAuthority,
    MintAssignedTransferHookProgramIsNotThisOne,
 ]
CUSTOM_ERROR_MAP: dict[int, CustomError] = {
    6000: CpiRuleEnforcementFailed(),
    6001: TransferAmountRuleEnforceFailed(),
    6002: MetadataFieldDoesNotExist(),
    6003: MetadataFieldDoesNotPass(),
    6004: GuardTokenAmountShouldBeAtLeastOne(),
    6005: NotOwnedByToken2022Program(),
    6006: MustBeInitializedByTransferHookAuthority(),
    6007: MintAssignedTransferHookProgramIsNotThisOne(),
}

def from_code(code: int) -> typing.Optional[CustomError]:
    maybe_err = CUSTOM_ERROR_MAP.get(code)
    if maybe_err is None:
        return None
    return maybe_err

