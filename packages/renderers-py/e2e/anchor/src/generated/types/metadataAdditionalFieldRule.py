'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from . import metadataAdditionalFieldRestriction;

class MetadataAdditionalFieldRuleJSON(typing.TypedDict):
    field: str
    valueRestrictions: typing.Optional[metadataAdditionalFieldRestriction.MetadataAdditionalFieldRestrictionJSON]

@dataclass
class MetadataAdditionalFieldRule:
    layout: typing.ClassVar = borsh.CStruct(
        "field" /borsh.String,
        "valueRestrictions" /borsh.Option(metadataAdditionalFieldRestriction.layout),
        )
    #fields
    field: str
    valueRestrictions: typing.Optional[metadataAdditionalFieldRestriction.MetadataAdditionalFieldRestrictionKind]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "MetadataAdditionalFieldRule":
        return cls(
        field=obj["field"],
        valueRestrictions=(None if obj["valueRestrictions"] is None else metadataAdditionalFieldRestriction.from_decoded(obj["valueRestrictions"])),
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "field": self.field,
                "valueRestrictions": self.valueRestrictions,
                }

    def to_json(self) -> MetadataAdditionalFieldRuleJSON:
        return {
                "field": self.field,
                "valueRestrictions": (None if self.valueRestrictions is None else self.valueRestrictions.to_json()),
                }

    @classmethod
    def from_json(cls, obj: MetadataAdditionalFieldRuleJSON) -> "MetadataAdditionalFieldRule":
        return cls(
                field=obj["field"],
                valueRestrictions=(None if obj["valueRestrictions"] is None else metadataAdditionalFieldRestriction.from_json(obj["valueRestrictions"])),
        )






