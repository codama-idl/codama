'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Construct, Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;

IncludesJSONValue = tuple[list[str]]
IncludesValue = tuple[list[str]]

class IncludesJSON(typing.TypedDict):
    kind: typing.Literal["Includes"]
    value: IncludesJSONValue


@dataclass
class Includes:
    discriminator: typing.ClassVar = 0
    value : IncludesValue
    def to_json(self) -> IncludesJSON:
        return IncludesJSON(
            kind="Includes",
            value = (self.value[0],)
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Includes": { "item_0":self.value[0] }
        }



ExcludesJSONValue = tuple[list[str]]
ExcludesValue = tuple[list[str]]

class ExcludesJSON(typing.TypedDict):
    kind: typing.Literal["Excludes"]
    value: ExcludesJSONValue


@dataclass
class Excludes:
    discriminator: typing.ClassVar = 1
    value : ExcludesValue
    def to_json(self) -> ExcludesJSON:
        return ExcludesJSON(
            kind="Excludes",
            value = (self.value[0],)
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Excludes": { "item_0":self.value[0] }
        }





MetadataAdditionalFieldRestrictionKind = typing.Union[
    Includes,
    Excludes,
]
MetadataAdditionalFieldRestrictionJSON = typing.Union[
    IncludesJSON,
    ExcludesJSON,
]

def from_decoded(obj: dict) -> MetadataAdditionalFieldRestrictionKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Includes" in obj:
      val = obj["Includes"]
      return Includes((
      val["item_0"],
      ))
    if "Excludes" in obj:
      val = obj["Excludes"]
      return Excludes((
      val["item_0"],
      ))
    raise ValueError("Invalid enum object")

def from_json(obj: MetadataAdditionalFieldRestrictionJSON) -> MetadataAdditionalFieldRestrictionKind:
    if obj["kind"] == "Includes":
        includesJSONValue = typing.cast(IncludesJSONValue, obj["value"])
        return Includes(
        (includesJSONValue[0],)
        )

    if obj["kind"] == "Excludes":
        excludesJSONValue = typing.cast(ExcludesJSONValue, obj["value"])
        return Excludes(
        (excludesJSONValue[0],)
        )

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Includes" / borsh.CStruct("item_0" / borsh.Vec(typing.cast(Construct, borsh.String)),),
"Excludes" / borsh.CStruct("item_0" / borsh.Vec(typing.cast(Construct, borsh.String)),),
)
