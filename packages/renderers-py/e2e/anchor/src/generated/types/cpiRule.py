'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Construct, Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;

AllowJSONValue = tuple[list[str]]
AllowValue = tuple[list[SolPubkey]]

class AllowJSON(typing.TypedDict):
    kind: typing.Literal["Allow"]
    value: AllowJSONValue


@dataclass
class Allow:
    discriminator: typing.ClassVar = 0
    value : AllowValue
    def to_json(self) -> AllowJSON:
        return AllowJSON(
            kind="Allow",
            value = (list(map(lambda item:str(item),self.value[0])),)
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Allow": { "item_0": }
        }



DenyJSONValue = tuple[list[str]]
DenyValue = tuple[list[SolPubkey]]

class DenyJSON(typing.TypedDict):
    kind: typing.Literal["Deny"]
    value: DenyJSONValue


@dataclass
class Deny:
    discriminator: typing.ClassVar = 1
    value : DenyValue
    def to_json(self) -> DenyJSON:
        return DenyJSON(
            kind="Deny",
            value = (list(map(lambda item:str(item),self.value[0])),)
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Deny": { "item_0": }
        }





CpiRuleKind = typing.Union[
    Allow,
    Deny,
]
CpiRuleJSON = typing.Union[
    AllowJSON,
    DenyJSON,
]

def from_decoded(obj: dict) -> CpiRuleKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Allow" in obj:
      val = obj["Allow"]
      return Allow((
      list(map(lambda item:SolPubkey.from_string(item),val["item_0"])),
      ))
    if "Deny" in obj:
      val = obj["Deny"]
      return Deny((
      list(map(lambda item:SolPubkey.from_string(item),val["item_0"])),
      ))
    raise ValueError("Invalid enum object")

def from_json(obj: CpiRuleJSON) -> CpiRuleKind:
    if obj["kind"] == "Allow":
        allowJSONValue = typing.cast(AllowJSONValue, obj["value"])
        return Allow(
        (list(map(lambda item:SolPubkey.from_string(item),allowJSONValue[0])),)
        )

    if obj["kind"] == "Deny":
        denyJSONValue = typing.cast(DenyJSONValue, obj["value"])
        return Deny(
        (list(map(lambda item:SolPubkey.from_string(item),denyJSONValue[0])),)
        )

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Allow" / borsh.CStruct("item_0" / borsh.Vec(typing.cast(Construct, BorshPubkey)),),
"Deny" / borsh.CStruct("item_0" / borsh.Vec(typing.cast(Construct, BorshPubkey)),),
)
