'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from construct import Construct
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from .. import types
from ..program_id import WEN_TRANSFER_GUARD_PROGRAM_ADDRESS
class UpdateGuardArgs(typing.TypedDict):
    cpiRule:typing.Optional[types.cpiRule.CpiRuleKind]
    transferAmountRule:typing.Optional[types.transferAmountRule.TransferAmountRuleKind]
    additionalFieldsRule:list[types.metadataAdditionalFieldRule.MetadataAdditionalFieldRule]


layout = borsh.CStruct(
    "cpiRule" /borsh.Option(types.cpiRule.layout),
    "transferAmountRule" /borsh.Option(types.transferAmountRule.layout),
    "additionalFieldsRule" /borsh.Vec(typing.cast(Construct, types.metadataAdditionalFieldRule.MetadataAdditionalFieldRule.layout)),
    )


class UpdateGuardAccounts(typing.TypedDict):
    guard:SolPubkey
    mint:SolPubkey
    tokenAccount:SolPubkey
    guardAuthority:SolPubkey
    tokenProgram:SolPubkey
    systemProgram:SolPubkey

def UpdateGuard(
    args: UpdateGuardArgs,
    accounts: UpdateGuardAccounts,
    program_id: SolPubkey =  WEN_TRANSFER_GUARD_PROGRAM_ADDRESS,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["guard"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["tokenAccount"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["guardAuthority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x33\x26\xaf\xb4\x19\xf9\x27\x18"


    encoded_args = layout.build({
        "cpiRule":(None if args["cpiRule"] is None else args["cpiRule"].to_encodable()),
        "transferAmountRule":(None if args["transferAmountRule"] is None else args["transferAmountRule"].to_encodable()),
        "additionalFieldsRule":list(map(lambda item:item.to_encodable(),args["additionalFieldsRule"])),
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)


def find_Guard(mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x77\x65\x6e\x5f\x74\x6f\x6b\x65\x6e\x5f\x74\x72\x61\x6e\x73\x66\x65\x72\x5f\x67\x75\x61\x72\x64",
       b"\x67\x75\x61\x72\x64\x5f\x76\x31",
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
         WEN_TRANSFER_GUARD_PROGRAM_ADDRESS
            )

    return address, bump



def find_TokenAccount(guardAuthority: SolPubkey, tokenProgram: SolPubkey, mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       bytes(guardAuthority),
       bytes(tokenProgram),
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
            )

    return address, bump







