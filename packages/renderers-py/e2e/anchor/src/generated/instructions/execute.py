'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import WEN_TRANSFER_GUARD_PROGRAM_ADDRESS
class ExecuteArgs(typing.TypedDict):
    amount:int


layout = borsh.CStruct(
    "amount" /borsh.U64,
    )


class ExecuteAccounts(typing.TypedDict):
    sourceAccount:SolPubkey
    mint:SolPubkey
    destinationAccount:SolPubkey
    ownerDelegate:SolPubkey
    extraMetasAccount:SolPubkey
    guard:SolPubkey
    instructionSysvarAccount:SolPubkey

def Execute(
    args: ExecuteArgs,
    accounts: ExecuteAccounts,
    program_id: SolPubkey =  WEN_TRANSFER_GUARD_PROGRAM_ADDRESS,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["sourceAccount"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["destinationAccount"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["ownerDelegate"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["extraMetasAccount"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["guard"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["instructionSysvarAccount"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x69\x25\x65\xc5\x4b\xfb\x66\x1a"
    encoded_args = layout.build({
        "amount":args["amount"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)


def find_ExtraMetasAccount(mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x65\x78\x74\x72\x61\x2d\x61\x63\x63\x6f\x75\x6e\x74\x2d\x6d\x65\x74\x61\x73",
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
         WEN_TRANSFER_GUARD_PROGRAM_ADDRESS
            )

    return address, bump





