'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID

class InitializeAccounts(typing.TypedDict):
    extraMetasAccount:SolPubkey
    guard:SolPubkey
    mint:SolPubkey
    transferHookAuthority:SolPubkey
    systemProgram:SolPubkey
    payer:SolPubkey

def Initialize(
    accounts: InitializeAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["extraMetasAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["guard"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["transferHookAuthority"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["payer"], is_signer=True, is_writable=True),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x2b\x22\x0d\x31\xa7\x58\xeb\xeb"
    encoded_args = b""
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)


def find_ExtraMetasAccount(mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x65\x78\x74\x72\x61\x2d\x61\x63\x63\x6f\x75\x6e\x74\x2d\x6d\x65\x74\x61\x73",
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump







