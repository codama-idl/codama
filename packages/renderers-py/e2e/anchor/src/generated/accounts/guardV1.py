'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from anchorpy.error import AccountInvalidDiscriminator
from anchorpy.utils.rpc import get_multiple_accounts
from construct import Construct
from dataclasses import dataclass
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solders.pubkey import Pubkey as SolPubkey
from .. import types
from ..program_id import WEN_TRANSFER_GUARD_PROGRAM_ADDRESS


class GuardV1JSON(typing.TypedDict):
    mint: str
    bump: int
    cpiRule: typing.Optional[types.cpiRule.CpiRuleJSON]
    transferAmountRule: typing.Optional[types.transferAmountRule.TransferAmountRuleJSON]
    additionalFieldsRule: list[types.metadataAdditionalFieldRule.MetadataAdditionalFieldRuleJSON]

@dataclass
class GuardV1:
    #fields
    mint: SolPubkey
    bump: int
    cpiRule: typing.Optional[types.cpiRule.CpiRuleKind]
    transferAmountRule: typing.Optional[types.transferAmountRule.TransferAmountRuleKind]
    additionalFieldsRule: list[types.metadataAdditionalFieldRule.MetadataAdditionalFieldRule]

    discriminator: typing.ClassVar = b"\xb9\x95\x9c\x4e\xf5\x6c\xac\x44"
    DISCRIMINATOR_SIZE: int = 8

    layout: typing.ClassVar = borsh.CStruct(
        "mint" /BorshPubkey,
        "bump" /borsh.U8,
        "cpiRule" /borsh.Option(types.cpiRule.layout),
        "transferAmountRule" /borsh.Option(types.transferAmountRule.layout),
        "additionalFieldsRule" /borsh.Vec(typing.cast(Construct, types.metadataAdditionalFieldRule.MetadataAdditionalFieldRule.layout)),
        )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = WEN_TRANSFER_GUARD_PROGRAM_ADDRESS,
    ) -> typing.Optional["GuardV1"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = WEN_TRANSFER_GUARD_PROGRAM_ADDRESS,
    ) -> typing.List[typing.Optional["GuardV1"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["GuardV1"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "GuardV1":
        if data[:cls.DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = GuardV1.layout.parse(data[cls.DISCRIMINATOR_SIZE:])
        return cls(
                mint=dec.mint,
                bump=dec.bump,
                cpiRule=(None if dec.cpiRule is None else types.cpiRule.from_decoded(dec.cpiRule)),
                transferAmountRule=(None if dec.transferAmountRule is None else types.transferAmountRule.from_decoded(dec.transferAmountRule)),
                additionalFieldsRule=list(map(lambda item:types.metadataAdditionalFieldRule.MetadataAdditionalFieldRule.from_json(item),dec.additionalFieldsRule)),
                )
    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "mint": self.mint,
                "bump": self.bump,
                "cpiRule": (None if self.cpiRule is None else self.cpiRule.to_encodable()),
                "transferAmountRule": (None if self.transferAmountRule is None else self.transferAmountRule.to_encodable()),
                "additionalFieldsRule": list(map(lambda item:item.to_encodable(),self.additionalFieldsRule)),
                }
    def to_json(self) -> GuardV1JSON:
        return {
                "mint": str(self.mint),
                "bump": self.bump,
                "cpiRule": (None if self.cpiRule is None else self.cpiRule.to_json()),
                "transferAmountRule": (None if self.transferAmountRule is None else self.transferAmountRule.to_json()),
                "additionalFieldsRule": list(map(lambda item:item.to_json(),self.additionalFieldsRule)),
                }

    @classmethod
    def from_json(cls, obj: GuardV1JSON) -> "GuardV1":
        return cls(
                mint=SolPubkey.from_string(obj["mint"]),
                bump=obj["bump"],
                cpiRule=(None if obj["cpiRule"] is None else types.cpiRule.from_json(obj["cpiRule"])),
                transferAmountRule=(None if obj["transferAmountRule"] is None else types.transferAmountRule.from_json(obj["transferAmountRule"])),
                additionalFieldsRule=list(map(lambda item:types.metadataAdditionalFieldRule.MetadataAdditionalFieldRule.from_json(item),obj["additionalFieldsRule"])),
                )




