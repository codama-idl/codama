//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum QuarryMergeMineError {
    /// 6000 - Unauthorized.
    #[error("Unauthorized.")]
    Unauthorized = 0x1770,
    /// 6001 - Insufficient balance.
    #[error("Insufficient balance.")]
    InsufficientBalance = 0x1771,
    /// 6002 - Invalid miner for the given quarry.
    #[error("Invalid miner for the given quarry.")]
    InvalidMiner = 0x1772,
    /// 6003 - Cannot withdraw a replica mint.
    #[error("Cannot withdraw a replica mint.")]
    CannotWithdrawReplicaMint = 0x1773,
    /// 6004 - User must first withdraw from all replica quarries.
    #[error("User must first withdraw from all replica quarries.")]
    OutstandingReplicaTokens = 0x1774,
    /// 6005 - The replica mint must have the same number of decimals as the primary mint.
    #[error("The replica mint must have the same number of decimals as the primary mint.")]
    ReplicaDecimalsMismatch = 0x1775,
    /// 6006 - The replica mint must have zero supply.
    #[error("The replica mint must have zero supply.")]
    ReplicaNonZeroSupply = 0x1776,
}

impl From<QuarryMergeMineError> for solana_program_error::ProgramError {
    fn from(e: QuarryMergeMineError) -> Self {
        solana_program_error::ProgramError::Custom(e as u32)
    }
}
