//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const WITHDRAW_TOKENS_M_M_DISCRIMINATOR: [u8; 8] = [2, 4, 225, 61, 19, 182, 106, 170];

/// Accounts.
#[derive(Debug)]
pub struct WithdrawTokensMM {
    pub owner: solana_pubkey::Pubkey,

    pub pool: solana_pubkey::Pubkey,

    pub mm: solana_pubkey::Pubkey,

    pub withdraw_mint: solana_pubkey::Pubkey,

    pub mm_token_account: solana_pubkey::Pubkey,

    pub token_destination: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,
}

impl WithdrawTokensMM {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owner, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.pool, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.mm, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.withdraw_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.mm_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.token_destination,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&WithdrawTokensMMInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::QUARRY_MERGE_MINE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WithdrawTokensMMInstructionData {
    discriminator: [u8; 8],
}

impl WithdrawTokensMMInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [2, 4, 225, 61, 19, 182, 106, 170],
        }
    }
}

impl Default for WithdrawTokensMMInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `WithdrawTokensMM`.
///
/// ### Accounts:
///
///   0. `[signer]` owner
///   1. `[]` pool
///   2. `[writable]` mm
///   3. `[]` withdraw_mint
///   4. `[writable]` mm_token_account
///   5. `[writable]` token_destination
///   6. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct WithdrawTokensMMBuilder {
    owner: Option<solana_pubkey::Pubkey>,
    pool: Option<solana_pubkey::Pubkey>,
    mm: Option<solana_pubkey::Pubkey>,
    withdraw_mint: Option<solana_pubkey::Pubkey>,
    mm_token_account: Option<solana_pubkey::Pubkey>,
    token_destination: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl WithdrawTokensMMBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn mm(&mut self, mm: solana_pubkey::Pubkey) -> &mut Self {
        self.mm = Some(mm);
        self
    }
    #[inline(always)]
    pub fn withdraw_mint(&mut self, withdraw_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.withdraw_mint = Some(withdraw_mint);
        self
    }
    #[inline(always)]
    pub fn mm_token_account(&mut self, mm_token_account: solana_pubkey::Pubkey) -> &mut Self {
        self.mm_token_account = Some(mm_token_account);
        self
    }
    #[inline(always)]
    pub fn token_destination(&mut self, token_destination: solana_pubkey::Pubkey) -> &mut Self {
        self.token_destination = Some(token_destination);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = WithdrawTokensMM {
            owner: self.owner.expect("owner is not set"),
            pool: self.pool.expect("pool is not set"),
            mm: self.mm.expect("mm is not set"),
            withdraw_mint: self.withdraw_mint.expect("withdraw_mint is not set"),
            mm_token_account: self.mm_token_account.expect("mm_token_account is not set"),
            token_destination: self
                .token_destination
                .expect("token_destination is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `withdraw_tokens_m_m` CPI accounts.
pub struct WithdrawTokensMMCpiAccounts<'a, 'b> {
    pub owner: &'b solana_account_info::AccountInfo<'a>,

    pub pool: &'b solana_account_info::AccountInfo<'a>,

    pub mm: &'b solana_account_info::AccountInfo<'a>,

    pub withdraw_mint: &'b solana_account_info::AccountInfo<'a>,

    pub mm_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub token_destination: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `withdraw_tokens_m_m` CPI instruction.
pub struct WithdrawTokensMMCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub owner: &'b solana_account_info::AccountInfo<'a>,

    pub pool: &'b solana_account_info::AccountInfo<'a>,

    pub mm: &'b solana_account_info::AccountInfo<'a>,

    pub withdraw_mint: &'b solana_account_info::AccountInfo<'a>,

    pub mm_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub token_destination: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> WithdrawTokensMMCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: WithdrawTokensMMCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            owner: accounts.owner,
            pool: accounts.pool,
            mm: accounts.mm,
            withdraw_mint: accounts.withdraw_mint,
            mm_token_account: accounts.mm_token_account,
            token_destination: accounts.token_destination,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.mm.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.withdraw_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.mm_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token_destination.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&WithdrawTokensMMInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_MERGE_MINE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.mm.clone());
        account_infos.push(self.withdraw_mint.clone());
        account_infos.push(self.mm_token_account.clone());
        account_infos.push(self.token_destination.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `WithdrawTokensMM` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` owner
///   1. `[]` pool
///   2. `[writable]` mm
///   3. `[]` withdraw_mint
///   4. `[writable]` mm_token_account
///   5. `[writable]` token_destination
///   6. `[]` token_program
#[derive(Clone, Debug)]
pub struct WithdrawTokensMMCpiBuilder<'a, 'b> {
    instruction: Box<WithdrawTokensMMCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> WithdrawTokensMMCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(WithdrawTokensMMCpiBuilderInstruction {
            __program: program,
            owner: None,
            pool: None,
            mm: None,
            withdraw_mint: None,
            mm_token_account: None,
            token_destination: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn mm(&mut self, mm: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mm = Some(mm);
        self
    }
    #[inline(always)]
    pub fn withdraw_mint(
        &mut self,
        withdraw_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.withdraw_mint = Some(withdraw_mint);
        self
    }
    #[inline(always)]
    pub fn mm_token_account(
        &mut self,
        mm_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mm_token_account = Some(mm_token_account);
        self
    }
    #[inline(always)]
    pub fn token_destination(
        &mut self,
        token_destination: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_destination = Some(token_destination);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = WithdrawTokensMMCpi {
            __program: self.instruction.__program,

            owner: self.instruction.owner.expect("owner is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            mm: self.instruction.mm.expect("mm is not set"),

            withdraw_mint: self
                .instruction
                .withdraw_mint
                .expect("withdraw_mint is not set"),

            mm_token_account: self
                .instruction
                .mm_token_account
                .expect("mm_token_account is not set"),

            token_destination: self
                .instruction
                .token_destination
                .expect("token_destination is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct WithdrawTokensMMCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_account_info::AccountInfo<'a>>,
    mm: Option<&'b solana_account_info::AccountInfo<'a>>,
    withdraw_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    mm_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_destination: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
