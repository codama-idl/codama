//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const UNSTAKE_PRIMARY_MINER_DISCRIMINATOR: [u8; 8] = [45, 62, 3, 33, 114, 156, 186, 26];

/// Accounts.
#[derive(Debug)]
pub struct UnstakePrimaryMiner {
    pub mm_owner: solana_pubkey::Pubkey,

    pub mm_primary_token_account: solana_pubkey::Pubkey,

    pub pool: solana_pubkey::Pubkey,

    pub mm: solana_pubkey::Pubkey,

    pub rewarder: solana_pubkey::Pubkey,

    pub quarry: solana_pubkey::Pubkey,

    pub miner: solana_pubkey::Pubkey,

    pub miner_vault: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,

    pub mine_program: solana_pubkey::Pubkey,
}

impl UnstakePrimaryMiner {
    pub fn instruction(
        &self,
        args: UnstakePrimaryMinerInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: UnstakePrimaryMinerInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.mm_owner,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.mm_primary_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.pool, false));
        accounts.push(solana_instruction::AccountMeta::new(self.mm, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rewarder,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.quarry, false));
        accounts.push(solana_instruction::AccountMeta::new(self.miner, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.miner_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.mine_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&UnstakePrimaryMinerInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::QUARRY_MERGE_MINE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UnstakePrimaryMinerInstructionData {
    discriminator: [u8; 8],
}

impl UnstakePrimaryMinerInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [45, 62, 3, 33, 114, 156, 186, 26],
        }
    }
}

impl Default for UnstakePrimaryMinerInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UnstakePrimaryMinerInstructionArgs {
    pub amount: u64,
}

/// Instruction builder for `UnstakePrimaryMiner`.
///
/// ### Accounts:
///
///   0. `[signer]` mm_owner
///   1. `[writable]` mm_primary_token_account
///   2. `[writable]` pool
///   3. `[writable]` mm
///   4. `[]` rewarder
///   5. `[writable]` quarry
///   6. `[writable]` miner
///   7. `[writable]` miner_vault
///   8. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   9. `[optional]` mine_program (default to `QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB`)
#[derive(Clone, Debug, Default)]
pub struct UnstakePrimaryMinerBuilder {
    mm_owner: Option<solana_pubkey::Pubkey>,
    mm_primary_token_account: Option<solana_pubkey::Pubkey>,
    pool: Option<solana_pubkey::Pubkey>,
    mm: Option<solana_pubkey::Pubkey>,
    rewarder: Option<solana_pubkey::Pubkey>,
    quarry: Option<solana_pubkey::Pubkey>,
    miner: Option<solana_pubkey::Pubkey>,
    miner_vault: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    mine_program: Option<solana_pubkey::Pubkey>,
    amount: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl UnstakePrimaryMinerBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn mm_owner(&mut self, mm_owner: solana_pubkey::Pubkey) -> &mut Self {
        self.mm_owner = Some(mm_owner);
        self
    }
    #[inline(always)]
    pub fn mm_primary_token_account(
        &mut self,
        mm_primary_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.mm_primary_token_account = Some(mm_primary_token_account);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn mm(&mut self, mm: solana_pubkey::Pubkey) -> &mut Self {
        self.mm = Some(mm);
        self
    }
    #[inline(always)]
    pub fn rewarder(&mut self, rewarder: solana_pubkey::Pubkey) -> &mut Self {
        self.rewarder = Some(rewarder);
        self
    }
    #[inline(always)]
    pub fn quarry(&mut self, quarry: solana_pubkey::Pubkey) -> &mut Self {
        self.quarry = Some(quarry);
        self
    }
    #[inline(always)]
    pub fn miner(&mut self, miner: solana_pubkey::Pubkey) -> &mut Self {
        self.miner = Some(miner);
        self
    }
    #[inline(always)]
    pub fn miner_vault(&mut self, miner_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.miner_vault = Some(miner_vault);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB']`
    #[inline(always)]
    pub fn mine_program(&mut self, mine_program: solana_pubkey::Pubkey) -> &mut Self {
        self.mine_program = Some(mine_program);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = UnstakePrimaryMiner {
            mm_owner: self.mm_owner.expect("mm_owner is not set"),
            mm_primary_token_account: self
                .mm_primary_token_account
                .expect("mm_primary_token_account is not set"),
            pool: self.pool.expect("pool is not set"),
            mm: self.mm.expect("mm is not set"),
            rewarder: self.rewarder.expect("rewarder is not set"),
            quarry: self.quarry.expect("quarry is not set"),
            miner: self.miner.expect("miner is not set"),
            miner_vault: self.miner_vault.expect("miner_vault is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            mine_program: self.mine_program.unwrap_or(solana_pubkey::pubkey!(
                "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB"
            )),
        };
        let args = UnstakePrimaryMinerInstructionArgs {
            amount: self.amount.clone().expect("amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `unstake_primary_miner` CPI accounts.
pub struct UnstakePrimaryMinerCpiAccounts<'a, 'b> {
    pub mm_owner: &'b solana_account_info::AccountInfo<'a>,

    pub mm_primary_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub pool: &'b solana_account_info::AccountInfo<'a>,

    pub mm: &'b solana_account_info::AccountInfo<'a>,

    pub rewarder: &'b solana_account_info::AccountInfo<'a>,

    pub quarry: &'b solana_account_info::AccountInfo<'a>,

    pub miner: &'b solana_account_info::AccountInfo<'a>,

    pub miner_vault: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub mine_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `unstake_primary_miner` CPI instruction.
pub struct UnstakePrimaryMinerCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub mm_owner: &'b solana_account_info::AccountInfo<'a>,

    pub mm_primary_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub pool: &'b solana_account_info::AccountInfo<'a>,

    pub mm: &'b solana_account_info::AccountInfo<'a>,

    pub rewarder: &'b solana_account_info::AccountInfo<'a>,

    pub quarry: &'b solana_account_info::AccountInfo<'a>,

    pub miner: &'b solana_account_info::AccountInfo<'a>,

    pub miner_vault: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub mine_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: UnstakePrimaryMinerInstructionArgs,
}

impl<'a, 'b> UnstakePrimaryMinerCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: UnstakePrimaryMinerCpiAccounts<'a, 'b>,
        args: UnstakePrimaryMinerInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            mm_owner: accounts.mm_owner,
            mm_primary_token_account: accounts.mm_primary_token_account,
            pool: accounts.pool,
            mm: accounts.mm,
            rewarder: accounts.rewarder,
            quarry: accounts.quarry,
            miner: accounts.miner,
            miner_vault: accounts.miner_vault,
            token_program: accounts.token_program,
            mine_program: accounts.mine_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.mm_owner.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.mm_primary_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.pool.key, false));
        accounts.push(solana_instruction::AccountMeta::new(*self.mm.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rewarder.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.quarry.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.miner.key, false));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.miner_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.mine_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&UnstakePrimaryMinerInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_MERGE_MINE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.mm_owner.clone());
        account_infos.push(self.mm_primary_token_account.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.mm.clone());
        account_infos.push(self.rewarder.clone());
        account_infos.push(self.quarry.clone());
        account_infos.push(self.miner.clone());
        account_infos.push(self.miner_vault.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.mine_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UnstakePrimaryMiner` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` mm_owner
///   1. `[writable]` mm_primary_token_account
///   2. `[writable]` pool
///   3. `[writable]` mm
///   4. `[]` rewarder
///   5. `[writable]` quarry
///   6. `[writable]` miner
///   7. `[writable]` miner_vault
///   8. `[]` token_program
///   9. `[]` mine_program
#[derive(Clone, Debug)]
pub struct UnstakePrimaryMinerCpiBuilder<'a, 'b> {
    instruction: Box<UnstakePrimaryMinerCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UnstakePrimaryMinerCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UnstakePrimaryMinerCpiBuilderInstruction {
            __program: program,
            mm_owner: None,
            mm_primary_token_account: None,
            pool: None,
            mm: None,
            rewarder: None,
            quarry: None,
            miner: None,
            miner_vault: None,
            token_program: None,
            mine_program: None,
            amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn mm_owner(&mut self, mm_owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mm_owner = Some(mm_owner);
        self
    }
    #[inline(always)]
    pub fn mm_primary_token_account(
        &mut self,
        mm_primary_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mm_primary_token_account = Some(mm_primary_token_account);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn mm(&mut self, mm: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mm = Some(mm);
        self
    }
    #[inline(always)]
    pub fn rewarder(&mut self, rewarder: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rewarder = Some(rewarder);
        self
    }
    #[inline(always)]
    pub fn quarry(&mut self, quarry: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.quarry = Some(quarry);
        self
    }
    #[inline(always)]
    pub fn miner(&mut self, miner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.miner = Some(miner);
        self
    }
    #[inline(always)]
    pub fn miner_vault(
        &mut self,
        miner_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.miner_vault = Some(miner_vault);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn mine_program(
        &mut self,
        mine_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mine_program = Some(mine_program);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = UnstakePrimaryMinerInstructionArgs {
            amount: self.instruction.amount.clone().expect("amount is not set"),
        };
        let instruction = UnstakePrimaryMinerCpi {
            __program: self.instruction.__program,

            mm_owner: self.instruction.mm_owner.expect("mm_owner is not set"),

            mm_primary_token_account: self
                .instruction
                .mm_primary_token_account
                .expect("mm_primary_token_account is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            mm: self.instruction.mm.expect("mm is not set"),

            rewarder: self.instruction.rewarder.expect("rewarder is not set"),

            quarry: self.instruction.quarry.expect("quarry is not set"),

            miner: self.instruction.miner.expect("miner is not set"),

            miner_vault: self
                .instruction
                .miner_vault
                .expect("miner_vault is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            mine_program: self
                .instruction
                .mine_program
                .expect("mine_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct UnstakePrimaryMinerCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    mm_owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    mm_primary_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_account_info::AccountInfo<'a>>,
    mm: Option<&'b solana_account_info::AccountInfo<'a>>,
    rewarder: Option<&'b solana_account_info::AccountInfo<'a>>,
    quarry: Option<&'b solana_account_info::AccountInfo<'a>>,
    miner: Option<&'b solana_account_info::AccountInfo<'a>>,
    miner_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    mine_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
