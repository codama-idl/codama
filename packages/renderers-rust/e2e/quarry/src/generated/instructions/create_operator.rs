//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const CREATE_OPERATOR_DISCRIMINATOR: [u8; 8] = [145, 40, 238, 75, 181, 252, 59, 11];

/// Accounts.
#[derive(Debug)]
pub struct CreateOperator {
    pub base: solana_pubkey::Pubkey,

    pub operator: solana_pubkey::Pubkey,

    pub rewarder: solana_pubkey::Pubkey,

    pub admin: solana_pubkey::Pubkey,

    pub payer: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub quarry_mine_program: solana_pubkey::Pubkey,
}

impl CreateOperator {
    pub fn instruction(
        &self,
        args: CreateOperatorInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateOperatorInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.base, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.operator, false));
        accounts.push(solana_instruction::AccountMeta::new(self.rewarder, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.admin, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.quarry_mine_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateOperatorInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::QUARRY_OPERATOR_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateOperatorInstructionData {
    discriminator: [u8; 8],
}

impl CreateOperatorInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [145, 40, 238, 75, 181, 252, 59, 11],
        }
    }
}

impl Default for CreateOperatorInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateOperatorInstructionArgs {
    pub bump: u8,
}

/// Instruction builder for `CreateOperator`.
///
/// ### Accounts:
///
///   0. `[signer]` base
///   1. `[writable]` operator
///   2. `[writable]` rewarder
///   3. `[]` admin
///   4. `[writable, signer]` payer
///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   6. `[optional]` quarry_mine_program (default to `QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB`)
#[derive(Clone, Debug, Default)]
pub struct CreateOperatorBuilder {
    base: Option<solana_pubkey::Pubkey>,
    operator: Option<solana_pubkey::Pubkey>,
    rewarder: Option<solana_pubkey::Pubkey>,
    admin: Option<solana_pubkey::Pubkey>,
    payer: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    quarry_mine_program: Option<solana_pubkey::Pubkey>,
    bump: Option<u8>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CreateOperatorBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn base(&mut self, base: solana_pubkey::Pubkey) -> &mut Self {
        self.base = Some(base);
        self
    }
    #[inline(always)]
    pub fn operator(&mut self, operator: solana_pubkey::Pubkey) -> &mut Self {
        self.operator = Some(operator);
        self
    }
    #[inline(always)]
    pub fn rewarder(&mut self, rewarder: solana_pubkey::Pubkey) -> &mut Self {
        self.rewarder = Some(rewarder);
        self
    }
    #[inline(always)]
    pub fn admin(&mut self, admin: solana_pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB']`
    #[inline(always)]
    pub fn quarry_mine_program(&mut self, quarry_mine_program: solana_pubkey::Pubkey) -> &mut Self {
        self.quarry_mine_program = Some(quarry_mine_program);
        self
    }
    #[inline(always)]
    pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.bump = Some(bump);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CreateOperator {
            base: self.base.expect("base is not set"),
            operator: self.operator.expect("operator is not set"),
            rewarder: self.rewarder.expect("rewarder is not set"),
            admin: self.admin.expect("admin is not set"),
            payer: self.payer.expect("payer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            quarry_mine_program: self.quarry_mine_program.unwrap_or(solana_pubkey::pubkey!(
                "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB"
            )),
        };
        let args = CreateOperatorInstructionArgs {
            bump: self.bump.clone().expect("bump is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_operator` CPI accounts.
pub struct CreateOperatorCpiAccounts<'a, 'b> {
    pub base: &'b solana_account_info::AccountInfo<'a>,

    pub operator: &'b solana_account_info::AccountInfo<'a>,

    pub rewarder: &'b solana_account_info::AccountInfo<'a>,

    pub admin: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub quarry_mine_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `create_operator` CPI instruction.
pub struct CreateOperatorCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub base: &'b solana_account_info::AccountInfo<'a>,

    pub operator: &'b solana_account_info::AccountInfo<'a>,

    pub rewarder: &'b solana_account_info::AccountInfo<'a>,

    pub admin: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub quarry_mine_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateOperatorInstructionArgs,
}

impl<'a, 'b> CreateOperatorCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CreateOperatorCpiAccounts<'a, 'b>,
        args: CreateOperatorInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            base: accounts.base,
            operator: accounts.operator,
            rewarder: accounts.rewarder,
            admin: accounts.admin,
            payer: accounts.payer,
            system_program: accounts.system_program,
            quarry_mine_program: accounts.quarry_mine_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.base.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.operator.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.rewarder.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.admin.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.quarry_mine_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateOperatorInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_OPERATOR_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.base.clone());
        account_infos.push(self.operator.clone());
        account_infos.push(self.rewarder.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.quarry_mine_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateOperator` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` base
///   1. `[writable]` operator
///   2. `[writable]` rewarder
///   3. `[]` admin
///   4. `[writable, signer]` payer
///   5. `[]` system_program
///   6. `[]` quarry_mine_program
#[derive(Clone, Debug)]
pub struct CreateOperatorCpiBuilder<'a, 'b> {
    instruction: Box<CreateOperatorCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateOperatorCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateOperatorCpiBuilderInstruction {
            __program: program,
            base: None,
            operator: None,
            rewarder: None,
            admin: None,
            payer: None,
            system_program: None,
            quarry_mine_program: None,
            bump: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn base(&mut self, base: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.base = Some(base);
        self
    }
    #[inline(always)]
    pub fn operator(&mut self, operator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.operator = Some(operator);
        self
    }
    #[inline(always)]
    pub fn rewarder(&mut self, rewarder: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rewarder = Some(rewarder);
        self
    }
    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn quarry_mine_program(
        &mut self,
        quarry_mine_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quarry_mine_program = Some(quarry_mine_program);
        self
    }
    #[inline(always)]
    pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.instruction.bump = Some(bump);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = CreateOperatorInstructionArgs {
            bump: self.instruction.bump.clone().expect("bump is not set"),
        };
        let instruction = CreateOperatorCpi {
            __program: self.instruction.__program,

            base: self.instruction.base.expect("base is not set"),

            operator: self.instruction.operator.expect("operator is not set"),

            rewarder: self.instruction.rewarder.expect("rewarder is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            quarry_mine_program: self
                .instruction
                .quarry_mine_program
                .expect("quarry_mine_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateOperatorCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    base: Option<&'b solana_account_info::AccountInfo<'a>>,
    operator: Option<&'b solana_account_info::AccountInfo<'a>>,
    rewarder: Option<&'b solana_account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    quarry_mine_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    bump: Option<u8>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
