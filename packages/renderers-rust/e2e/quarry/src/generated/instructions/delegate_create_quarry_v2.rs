//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const DELEGATE_CREATE_QUARRY_V2_DISCRIMINATOR: [u8; 8] = [69, 180, 9, 212, 75, 142, 202, 62];

/// Accounts.
#[derive(Debug)]
pub struct DelegateCreateQuarryV2 {
    pub operator: solana_pubkey::Pubkey,

    pub delegate: solana_pubkey::Pubkey,

    pub rewarder: solana_pubkey::Pubkey,

    pub quarry_mine_program: solana_pubkey::Pubkey,

    pub quarry: solana_pubkey::Pubkey,

    pub token_mint: solana_pubkey::Pubkey,

    pub payer: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl DelegateCreateQuarryV2 {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.operator, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.delegate,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.rewarder, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.quarry_mine_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.quarry, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&DelegateCreateQuarryV2InstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::QUARRY_OPERATOR_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DelegateCreateQuarryV2InstructionData {
    discriminator: [u8; 8],
}

impl DelegateCreateQuarryV2InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [69, 180, 9, 212, 75, 142, 202, 62],
        }
    }
}

impl Default for DelegateCreateQuarryV2InstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `DelegateCreateQuarryV2`.
///
/// ### Accounts:
///
///   0. `[writable]` operator
///   1. `[signer]` delegate
///   2. `[writable]` rewarder
///   3. `[optional]` quarry_mine_program (default to `QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB`)
///   4. `[writable]` quarry
///   5. `[]` token_mint
///   6. `[writable, signer]` payer
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct DelegateCreateQuarryV2Builder {
    operator: Option<solana_pubkey::Pubkey>,
    delegate: Option<solana_pubkey::Pubkey>,
    rewarder: Option<solana_pubkey::Pubkey>,
    quarry_mine_program: Option<solana_pubkey::Pubkey>,
    quarry: Option<solana_pubkey::Pubkey>,
    token_mint: Option<solana_pubkey::Pubkey>,
    payer: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl DelegateCreateQuarryV2Builder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn operator(&mut self, operator: solana_pubkey::Pubkey) -> &mut Self {
        self.operator = Some(operator);
        self
    }
    #[inline(always)]
    pub fn delegate(&mut self, delegate: solana_pubkey::Pubkey) -> &mut Self {
        self.delegate = Some(delegate);
        self
    }
    #[inline(always)]
    pub fn rewarder(&mut self, rewarder: solana_pubkey::Pubkey) -> &mut Self {
        self.rewarder = Some(rewarder);
        self
    }
    /// `[optional account, default to 'QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB']`
    #[inline(always)]
    pub fn quarry_mine_program(&mut self, quarry_mine_program: solana_pubkey::Pubkey) -> &mut Self {
        self.quarry_mine_program = Some(quarry_mine_program);
        self
    }
    #[inline(always)]
    pub fn quarry(&mut self, quarry: solana_pubkey::Pubkey) -> &mut Self {
        self.quarry = Some(quarry);
        self
    }
    #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.token_mint = Some(token_mint);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = DelegateCreateQuarryV2 {
            operator: self.operator.expect("operator is not set"),
            delegate: self.delegate.expect("delegate is not set"),
            rewarder: self.rewarder.expect("rewarder is not set"),
            quarry_mine_program: self.quarry_mine_program.unwrap_or(solana_pubkey::pubkey!(
                "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB"
            )),
            quarry: self.quarry.expect("quarry is not set"),
            token_mint: self.token_mint.expect("token_mint is not set"),
            payer: self.payer.expect("payer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `delegate_create_quarry_v2` CPI accounts.
pub struct DelegateCreateQuarryV2CpiAccounts<'a, 'b> {
    pub operator: &'b solana_account_info::AccountInfo<'a>,

    pub delegate: &'b solana_account_info::AccountInfo<'a>,

    pub rewarder: &'b solana_account_info::AccountInfo<'a>,

    pub quarry_mine_program: &'b solana_account_info::AccountInfo<'a>,

    pub quarry: &'b solana_account_info::AccountInfo<'a>,

    pub token_mint: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `delegate_create_quarry_v2` CPI instruction.
pub struct DelegateCreateQuarryV2Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub operator: &'b solana_account_info::AccountInfo<'a>,

    pub delegate: &'b solana_account_info::AccountInfo<'a>,

    pub rewarder: &'b solana_account_info::AccountInfo<'a>,

    pub quarry_mine_program: &'b solana_account_info::AccountInfo<'a>,

    pub quarry: &'b solana_account_info::AccountInfo<'a>,

    pub token_mint: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> DelegateCreateQuarryV2Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: DelegateCreateQuarryV2CpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            operator: accounts.operator,
            delegate: accounts.delegate,
            rewarder: accounts.rewarder,
            quarry_mine_program: accounts.quarry_mine_program,
            quarry: accounts.quarry,
            token_mint: accounts.token_mint,
            payer: accounts.payer,
            system_program: accounts.system_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.operator.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.delegate.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.rewarder.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.quarry_mine_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.quarry.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&DelegateCreateQuarryV2InstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_OPERATOR_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.operator.clone());
        account_infos.push(self.delegate.clone());
        account_infos.push(self.rewarder.clone());
        account_infos.push(self.quarry_mine_program.clone());
        account_infos.push(self.quarry.clone());
        account_infos.push(self.token_mint.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `DelegateCreateQuarryV2` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` operator
///   1. `[signer]` delegate
///   2. `[writable]` rewarder
///   3. `[]` quarry_mine_program
///   4. `[writable]` quarry
///   5. `[]` token_mint
///   6. `[writable, signer]` payer
///   7. `[]` system_program
#[derive(Clone, Debug)]
pub struct DelegateCreateQuarryV2CpiBuilder<'a, 'b> {
    instruction: Box<DelegateCreateQuarryV2CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DelegateCreateQuarryV2CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(DelegateCreateQuarryV2CpiBuilderInstruction {
            __program: program,
            operator: None,
            delegate: None,
            rewarder: None,
            quarry_mine_program: None,
            quarry: None,
            token_mint: None,
            payer: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn operator(&mut self, operator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.operator = Some(operator);
        self
    }
    #[inline(always)]
    pub fn delegate(&mut self, delegate: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.delegate = Some(delegate);
        self
    }
    #[inline(always)]
    pub fn rewarder(&mut self, rewarder: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rewarder = Some(rewarder);
        self
    }
    #[inline(always)]
    pub fn quarry_mine_program(
        &mut self,
        quarry_mine_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quarry_mine_program = Some(quarry_mine_program);
        self
    }
    #[inline(always)]
    pub fn quarry(&mut self, quarry: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.quarry = Some(quarry);
        self
    }
    #[inline(always)]
    pub fn token_mint(
        &mut self,
        token_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint = Some(token_mint);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = DelegateCreateQuarryV2Cpi {
            __program: self.instruction.__program,

            operator: self.instruction.operator.expect("operator is not set"),

            delegate: self.instruction.delegate.expect("delegate is not set"),

            rewarder: self.instruction.rewarder.expect("rewarder is not set"),

            quarry_mine_program: self
                .instruction
                .quarry_mine_program
                .expect("quarry_mine_program is not set"),

            quarry: self.instruction.quarry.expect("quarry is not set"),

            token_mint: self.instruction.token_mint.expect("token_mint is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct DelegateCreateQuarryV2CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    operator: Option<&'b solana_account_info::AccountInfo<'a>>,
    delegate: Option<&'b solana_account_info::AccountInfo<'a>>,
    rewarder: Option<&'b solana_account_info::AccountInfo<'a>>,
    quarry_mine_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    quarry: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
