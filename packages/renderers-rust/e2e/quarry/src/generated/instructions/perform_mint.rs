//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const PERFORM_MINT_DISCRIMINATOR: [u8; 8] = [8, 41, 142, 248, 38, 22, 106, 23];

/// Accounts.
#[derive(Debug)]
pub struct PerformMint {
    pub mint_wrapper: solana_pubkey::Pubkey,

    pub minter_authority: solana_pubkey::Pubkey,

    pub token_mint: solana_pubkey::Pubkey,

    pub destination: solana_pubkey::Pubkey,

    pub minter: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,
}

impl PerformMint {
    pub fn instruction(&self, args: PerformMintInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: PerformMintInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            self.mint_wrapper,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.minter_authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.token_mint, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.destination,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.minter, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&PerformMintInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::QUARRY_MINT_WRAPPER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PerformMintInstructionData {
    discriminator: [u8; 8],
}

impl PerformMintInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [8, 41, 142, 248, 38, 22, 106, 23],
        }
    }
}

impl Default for PerformMintInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PerformMintInstructionArgs {
    pub amount: u64,
}

/// Instruction builder for `PerformMint`.
///
/// ### Accounts:
///
///   0. `[writable]` mint_wrapper
///   1. `[signer]` minter_authority
///   2. `[writable]` token_mint
///   3. `[writable]` destination
///   4. `[writable]` minter
///   5. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct PerformMintBuilder {
    mint_wrapper: Option<solana_pubkey::Pubkey>,
    minter_authority: Option<solana_pubkey::Pubkey>,
    token_mint: Option<solana_pubkey::Pubkey>,
    destination: Option<solana_pubkey::Pubkey>,
    minter: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    amount: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl PerformMintBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn mint_wrapper(&mut self, mint_wrapper: solana_pubkey::Pubkey) -> &mut Self {
        self.mint_wrapper = Some(mint_wrapper);
        self
    }
    #[inline(always)]
    pub fn minter_authority(&mut self, minter_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.minter_authority = Some(minter_authority);
        self
    }
    #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.token_mint = Some(token_mint);
        self
    }
    #[inline(always)]
    pub fn destination(&mut self, destination: solana_pubkey::Pubkey) -> &mut Self {
        self.destination = Some(destination);
        self
    }
    #[inline(always)]
    pub fn minter(&mut self, minter: solana_pubkey::Pubkey) -> &mut Self {
        self.minter = Some(minter);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = PerformMint {
            mint_wrapper: self.mint_wrapper.expect("mint_wrapper is not set"),
            minter_authority: self.minter_authority.expect("minter_authority is not set"),
            token_mint: self.token_mint.expect("token_mint is not set"),
            destination: self.destination.expect("destination is not set"),
            minter: self.minter.expect("minter is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };
        let args = PerformMintInstructionArgs {
            amount: self.amount.clone().expect("amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `perform_mint` CPI accounts.
pub struct PerformMintCpiAccounts<'a, 'b> {
    pub mint_wrapper: &'b solana_account_info::AccountInfo<'a>,

    pub minter_authority: &'b solana_account_info::AccountInfo<'a>,

    pub token_mint: &'b solana_account_info::AccountInfo<'a>,

    pub destination: &'b solana_account_info::AccountInfo<'a>,

    pub minter: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `perform_mint` CPI instruction.
pub struct PerformMintCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub mint_wrapper: &'b solana_account_info::AccountInfo<'a>,

    pub minter_authority: &'b solana_account_info::AccountInfo<'a>,

    pub token_mint: &'b solana_account_info::AccountInfo<'a>,

    pub destination: &'b solana_account_info::AccountInfo<'a>,

    pub minter: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: PerformMintInstructionArgs,
}

impl<'a, 'b> PerformMintCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: PerformMintCpiAccounts<'a, 'b>,
        args: PerformMintInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            mint_wrapper: accounts.mint_wrapper,
            minter_authority: accounts.minter_authority,
            token_mint: accounts.token_mint,
            destination: accounts.destination,
            minter: accounts.minter,
            token_program: accounts.token_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.mint_wrapper.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.minter_authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.destination.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.minter.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&PerformMintInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_MINT_WRAPPER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.mint_wrapper.clone());
        account_infos.push(self.minter_authority.clone());
        account_infos.push(self.token_mint.clone());
        account_infos.push(self.destination.clone());
        account_infos.push(self.minter.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `PerformMint` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` mint_wrapper
///   1. `[signer]` minter_authority
///   2. `[writable]` token_mint
///   3. `[writable]` destination
///   4. `[writable]` minter
///   5. `[]` token_program
#[derive(Clone, Debug)]
pub struct PerformMintCpiBuilder<'a, 'b> {
    instruction: Box<PerformMintCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> PerformMintCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(PerformMintCpiBuilderInstruction {
            __program: program,
            mint_wrapper: None,
            minter_authority: None,
            token_mint: None,
            destination: None,
            minter: None,
            token_program: None,
            amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn mint_wrapper(
        &mut self,
        mint_wrapper: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_wrapper = Some(mint_wrapper);
        self
    }
    #[inline(always)]
    pub fn minter_authority(
        &mut self,
        minter_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.minter_authority = Some(minter_authority);
        self
    }
    #[inline(always)]
    pub fn token_mint(
        &mut self,
        token_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint = Some(token_mint);
        self
    }
    #[inline(always)]
    pub fn destination(
        &mut self,
        destination: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination = Some(destination);
        self
    }
    #[inline(always)]
    pub fn minter(&mut self, minter: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.minter = Some(minter);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = PerformMintInstructionArgs {
            amount: self.instruction.amount.clone().expect("amount is not set"),
        };
        let instruction = PerformMintCpi {
            __program: self.instruction.__program,

            mint_wrapper: self
                .instruction
                .mint_wrapper
                .expect("mint_wrapper is not set"),

            minter_authority: self
                .instruction
                .minter_authority
                .expect("minter_authority is not set"),

            token_mint: self.instruction.token_mint.expect("token_mint is not set"),

            destination: self
                .instruction
                .destination
                .expect("destination is not set"),

            minter: self.instruction.minter.expect("minter is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct PerformMintCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    mint_wrapper: Option<&'b solana_account_info::AccountInfo<'a>>,
    minter_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    destination: Option<&'b solana_account_info::AccountInfo<'a>>,
    minter: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
