//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const CLAIM_REWARDS_M_M_DISCRIMINATOR: [u8; 8] = [4, 144, 132, 71, 116, 23, 151, 80];

/// Accounts.
#[derive(Debug)]
pub struct ClaimRewardsMM {
    pub mint_wrapper: solana_pubkey::Pubkey,

    pub mint_wrapper_program: solana_pubkey::Pubkey,

    pub minter: solana_pubkey::Pubkey,

    pub rewards_token_mint: solana_pubkey::Pubkey,

    pub rewards_token_account: solana_pubkey::Pubkey,

    pub claim_fee_token_account: solana_pubkey::Pubkey,

    pub stake_token_account: solana_pubkey::Pubkey,

    pub pool: solana_pubkey::Pubkey,

    pub mm: solana_pubkey::Pubkey,

    pub rewarder: solana_pubkey::Pubkey,

    pub quarry: solana_pubkey::Pubkey,

    pub miner: solana_pubkey::Pubkey,

    pub miner_vault: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,

    pub mine_program: solana_pubkey::Pubkey,
}

impl ClaimRewardsMM {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            self.mint_wrapper,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.mint_wrapper_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.minter, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.rewards_token_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.rewards_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.claim_fee_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.stake_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.pool, false));
        accounts.push(solana_instruction::AccountMeta::new(self.mm, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rewarder,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.quarry, false));
        accounts.push(solana_instruction::AccountMeta::new(self.miner, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.miner_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.mine_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&ClaimRewardsMMInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::QUARRY_MERGE_MINE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClaimRewardsMMInstructionData {
    discriminator: [u8; 8],
}

impl ClaimRewardsMMInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [4, 144, 132, 71, 116, 23, 151, 80],
        }
    }
}

impl Default for ClaimRewardsMMInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `ClaimRewardsMM`.
///
/// ### Accounts:
///
///   0. `[writable]` mint_wrapper
///   1. `[optional]` mint_wrapper_program (default to `QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV`)
///   2. `[writable]` minter
///   3. `[writable]` rewards_token_mint
///   4. `[writable]` rewards_token_account
///   5. `[writable]` claim_fee_token_account
///   6. `[writable]` stake_token_account
///   7. `[writable]` pool
///   8. `[writable]` mm
///   9. `[]` rewarder
///   10. `[writable]` quarry
///   11. `[writable]` miner
///   12. `[writable]` miner_vault
///   13. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   14. `[optional]` mine_program (default to `QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB`)
#[derive(Clone, Debug, Default)]
pub struct ClaimRewardsMMBuilder {
    mint_wrapper: Option<solana_pubkey::Pubkey>,
    mint_wrapper_program: Option<solana_pubkey::Pubkey>,
    minter: Option<solana_pubkey::Pubkey>,
    rewards_token_mint: Option<solana_pubkey::Pubkey>,
    rewards_token_account: Option<solana_pubkey::Pubkey>,
    claim_fee_token_account: Option<solana_pubkey::Pubkey>,
    stake_token_account: Option<solana_pubkey::Pubkey>,
    pool: Option<solana_pubkey::Pubkey>,
    mm: Option<solana_pubkey::Pubkey>,
    rewarder: Option<solana_pubkey::Pubkey>,
    quarry: Option<solana_pubkey::Pubkey>,
    miner: Option<solana_pubkey::Pubkey>,
    miner_vault: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    mine_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ClaimRewardsMMBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn mint_wrapper(&mut self, mint_wrapper: solana_pubkey::Pubkey) -> &mut Self {
        self.mint_wrapper = Some(mint_wrapper);
        self
    }
    /// `[optional account, default to 'QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV']`
    #[inline(always)]
    pub fn mint_wrapper_program(
        &mut self,
        mint_wrapper_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.mint_wrapper_program = Some(mint_wrapper_program);
        self
    }
    #[inline(always)]
    pub fn minter(&mut self, minter: solana_pubkey::Pubkey) -> &mut Self {
        self.minter = Some(minter);
        self
    }
    #[inline(always)]
    pub fn rewards_token_mint(&mut self, rewards_token_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.rewards_token_mint = Some(rewards_token_mint);
        self
    }
    #[inline(always)]
    pub fn rewards_token_account(
        &mut self,
        rewards_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.rewards_token_account = Some(rewards_token_account);
        self
    }
    #[inline(always)]
    pub fn claim_fee_token_account(
        &mut self,
        claim_fee_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.claim_fee_token_account = Some(claim_fee_token_account);
        self
    }
    #[inline(always)]
    pub fn stake_token_account(&mut self, stake_token_account: solana_pubkey::Pubkey) -> &mut Self {
        self.stake_token_account = Some(stake_token_account);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn mm(&mut self, mm: solana_pubkey::Pubkey) -> &mut Self {
        self.mm = Some(mm);
        self
    }
    #[inline(always)]
    pub fn rewarder(&mut self, rewarder: solana_pubkey::Pubkey) -> &mut Self {
        self.rewarder = Some(rewarder);
        self
    }
    #[inline(always)]
    pub fn quarry(&mut self, quarry: solana_pubkey::Pubkey) -> &mut Self {
        self.quarry = Some(quarry);
        self
    }
    #[inline(always)]
    pub fn miner(&mut self, miner: solana_pubkey::Pubkey) -> &mut Self {
        self.miner = Some(miner);
        self
    }
    #[inline(always)]
    pub fn miner_vault(&mut self, miner_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.miner_vault = Some(miner_vault);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB']`
    #[inline(always)]
    pub fn mine_program(&mut self, mine_program: solana_pubkey::Pubkey) -> &mut Self {
        self.mine_program = Some(mine_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = ClaimRewardsMM {
            mint_wrapper: self.mint_wrapper.expect("mint_wrapper is not set"),
            mint_wrapper_program: self.mint_wrapper_program.unwrap_or(solana_pubkey::pubkey!(
                "QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV"
            )),
            minter: self.minter.expect("minter is not set"),
            rewards_token_mint: self
                .rewards_token_mint
                .expect("rewards_token_mint is not set"),
            rewards_token_account: self
                .rewards_token_account
                .expect("rewards_token_account is not set"),
            claim_fee_token_account: self
                .claim_fee_token_account
                .expect("claim_fee_token_account is not set"),
            stake_token_account: self
                .stake_token_account
                .expect("stake_token_account is not set"),
            pool: self.pool.expect("pool is not set"),
            mm: self.mm.expect("mm is not set"),
            rewarder: self.rewarder.expect("rewarder is not set"),
            quarry: self.quarry.expect("quarry is not set"),
            miner: self.miner.expect("miner is not set"),
            miner_vault: self.miner_vault.expect("miner_vault is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            mine_program: self.mine_program.unwrap_or(solana_pubkey::pubkey!(
                "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `claim_rewards_m_m` CPI accounts.
pub struct ClaimRewardsMMCpiAccounts<'a, 'b> {
    pub mint_wrapper: &'b solana_account_info::AccountInfo<'a>,

    pub mint_wrapper_program: &'b solana_account_info::AccountInfo<'a>,

    pub minter: &'b solana_account_info::AccountInfo<'a>,

    pub rewards_token_mint: &'b solana_account_info::AccountInfo<'a>,

    pub rewards_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub claim_fee_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub stake_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub pool: &'b solana_account_info::AccountInfo<'a>,

    pub mm: &'b solana_account_info::AccountInfo<'a>,

    pub rewarder: &'b solana_account_info::AccountInfo<'a>,

    pub quarry: &'b solana_account_info::AccountInfo<'a>,

    pub miner: &'b solana_account_info::AccountInfo<'a>,

    pub miner_vault: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub mine_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `claim_rewards_m_m` CPI instruction.
pub struct ClaimRewardsMMCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub mint_wrapper: &'b solana_account_info::AccountInfo<'a>,

    pub mint_wrapper_program: &'b solana_account_info::AccountInfo<'a>,

    pub minter: &'b solana_account_info::AccountInfo<'a>,

    pub rewards_token_mint: &'b solana_account_info::AccountInfo<'a>,

    pub rewards_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub claim_fee_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub stake_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub pool: &'b solana_account_info::AccountInfo<'a>,

    pub mm: &'b solana_account_info::AccountInfo<'a>,

    pub rewarder: &'b solana_account_info::AccountInfo<'a>,

    pub quarry: &'b solana_account_info::AccountInfo<'a>,

    pub miner: &'b solana_account_info::AccountInfo<'a>,

    pub miner_vault: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub mine_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> ClaimRewardsMMCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: ClaimRewardsMMCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            mint_wrapper: accounts.mint_wrapper,
            mint_wrapper_program: accounts.mint_wrapper_program,
            minter: accounts.minter,
            rewards_token_mint: accounts.rewards_token_mint,
            rewards_token_account: accounts.rewards_token_account,
            claim_fee_token_account: accounts.claim_fee_token_account,
            stake_token_account: accounts.stake_token_account,
            pool: accounts.pool,
            mm: accounts.mm,
            rewarder: accounts.rewarder,
            quarry: accounts.quarry,
            miner: accounts.miner,
            miner_vault: accounts.miner_vault,
            token_program: accounts.token_program,
            mine_program: accounts.mine_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.mint_wrapper.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.mint_wrapper_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.minter.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.rewards_token_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.rewards_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.claim_fee_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.stake_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.pool.key, false));
        accounts.push(solana_instruction::AccountMeta::new(*self.mm.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rewarder.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.quarry.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.miner.key, false));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.miner_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.mine_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&ClaimRewardsMMInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_MERGE_MINE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.mint_wrapper.clone());
        account_infos.push(self.mint_wrapper_program.clone());
        account_infos.push(self.minter.clone());
        account_infos.push(self.rewards_token_mint.clone());
        account_infos.push(self.rewards_token_account.clone());
        account_infos.push(self.claim_fee_token_account.clone());
        account_infos.push(self.stake_token_account.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.mm.clone());
        account_infos.push(self.rewarder.clone());
        account_infos.push(self.quarry.clone());
        account_infos.push(self.miner.clone());
        account_infos.push(self.miner_vault.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.mine_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ClaimRewardsMM` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` mint_wrapper
///   1. `[]` mint_wrapper_program
///   2. `[writable]` minter
///   3. `[writable]` rewards_token_mint
///   4. `[writable]` rewards_token_account
///   5. `[writable]` claim_fee_token_account
///   6. `[writable]` stake_token_account
///   7. `[writable]` pool
///   8. `[writable]` mm
///   9. `[]` rewarder
///   10. `[writable]` quarry
///   11. `[writable]` miner
///   12. `[writable]` miner_vault
///   13. `[]` token_program
///   14. `[]` mine_program
#[derive(Clone, Debug)]
pub struct ClaimRewardsMMCpiBuilder<'a, 'b> {
    instruction: Box<ClaimRewardsMMCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClaimRewardsMMCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ClaimRewardsMMCpiBuilderInstruction {
            __program: program,
            mint_wrapper: None,
            mint_wrapper_program: None,
            minter: None,
            rewards_token_mint: None,
            rewards_token_account: None,
            claim_fee_token_account: None,
            stake_token_account: None,
            pool: None,
            mm: None,
            rewarder: None,
            quarry: None,
            miner: None,
            miner_vault: None,
            token_program: None,
            mine_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn mint_wrapper(
        &mut self,
        mint_wrapper: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_wrapper = Some(mint_wrapper);
        self
    }
    #[inline(always)]
    pub fn mint_wrapper_program(
        &mut self,
        mint_wrapper_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_wrapper_program = Some(mint_wrapper_program);
        self
    }
    #[inline(always)]
    pub fn minter(&mut self, minter: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.minter = Some(minter);
        self
    }
    #[inline(always)]
    pub fn rewards_token_mint(
        &mut self,
        rewards_token_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rewards_token_mint = Some(rewards_token_mint);
        self
    }
    #[inline(always)]
    pub fn rewards_token_account(
        &mut self,
        rewards_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rewards_token_account = Some(rewards_token_account);
        self
    }
    #[inline(always)]
    pub fn claim_fee_token_account(
        &mut self,
        claim_fee_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.claim_fee_token_account = Some(claim_fee_token_account);
        self
    }
    #[inline(always)]
    pub fn stake_token_account(
        &mut self,
        stake_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_token_account = Some(stake_token_account);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn mm(&mut self, mm: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mm = Some(mm);
        self
    }
    #[inline(always)]
    pub fn rewarder(&mut self, rewarder: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rewarder = Some(rewarder);
        self
    }
    #[inline(always)]
    pub fn quarry(&mut self, quarry: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.quarry = Some(quarry);
        self
    }
    #[inline(always)]
    pub fn miner(&mut self, miner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.miner = Some(miner);
        self
    }
    #[inline(always)]
    pub fn miner_vault(
        &mut self,
        miner_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.miner_vault = Some(miner_vault);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn mine_program(
        &mut self,
        mine_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mine_program = Some(mine_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = ClaimRewardsMMCpi {
            __program: self.instruction.__program,

            mint_wrapper: self
                .instruction
                .mint_wrapper
                .expect("mint_wrapper is not set"),

            mint_wrapper_program: self
                .instruction
                .mint_wrapper_program
                .expect("mint_wrapper_program is not set"),

            minter: self.instruction.minter.expect("minter is not set"),

            rewards_token_mint: self
                .instruction
                .rewards_token_mint
                .expect("rewards_token_mint is not set"),

            rewards_token_account: self
                .instruction
                .rewards_token_account
                .expect("rewards_token_account is not set"),

            claim_fee_token_account: self
                .instruction
                .claim_fee_token_account
                .expect("claim_fee_token_account is not set"),

            stake_token_account: self
                .instruction
                .stake_token_account
                .expect("stake_token_account is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            mm: self.instruction.mm.expect("mm is not set"),

            rewarder: self.instruction.rewarder.expect("rewarder is not set"),

            quarry: self.instruction.quarry.expect("quarry is not set"),

            miner: self.instruction.miner.expect("miner is not set"),

            miner_vault: self
                .instruction
                .miner_vault
                .expect("miner_vault is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            mine_program: self
                .instruction
                .mine_program
                .expect("mine_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ClaimRewardsMMCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    mint_wrapper: Option<&'b solana_account_info::AccountInfo<'a>>,
    mint_wrapper_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    minter: Option<&'b solana_account_info::AccountInfo<'a>>,
    rewards_token_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    rewards_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    claim_fee_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    stake_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_account_info::AccountInfo<'a>>,
    mm: Option<&'b solana_account_info::AccountInfo<'a>>,
    rewarder: Option<&'b solana_account_info::AccountInfo<'a>>,
    quarry: Option<&'b solana_account_info::AccountInfo<'a>>,
    miner: Option<&'b solana_account_info::AccountInfo<'a>>,
    miner_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    mine_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
