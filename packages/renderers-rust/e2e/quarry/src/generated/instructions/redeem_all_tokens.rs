//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const REDEEM_ALL_TOKENS_DISCRIMINATOR: [u8; 8] = [68, 38, 47, 47, 226, 176, 31, 48];

/// Accounts.
#[derive(Debug)]
pub struct RedeemAllTokens {
    pub redeemer: solana_pubkey::Pubkey,

    pub source_authority: solana_pubkey::Pubkey,

    pub iou_mint: solana_pubkey::Pubkey,

    pub iou_source: solana_pubkey::Pubkey,

    pub redemption_vault: solana_pubkey::Pubkey,

    pub redemption_destination: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,
}

impl RedeemAllTokens {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.redeemer, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.source_authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.iou_mint, false));
        accounts.push(solana_instruction::AccountMeta::new(self.iou_source, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.redemption_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.redemption_destination,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&RedeemAllTokensInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::QUARRY_REDEEMER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RedeemAllTokensInstructionData {
    discriminator: [u8; 8],
}

impl RedeemAllTokensInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [68, 38, 47, 47, 226, 176, 31, 48],
        }
    }
}

impl Default for RedeemAllTokensInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `RedeemAllTokens`.
///
/// ### Accounts:
///
///   0. `[writable]` redeemer
///   1. `[signer]` source_authority
///   2. `[writable]` iou_mint
///   3. `[writable]` iou_source
///   4. `[writable]` redemption_vault
///   5. `[writable]` redemption_destination
///   6. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct RedeemAllTokensBuilder {
    redeemer: Option<solana_pubkey::Pubkey>,
    source_authority: Option<solana_pubkey::Pubkey>,
    iou_mint: Option<solana_pubkey::Pubkey>,
    iou_source: Option<solana_pubkey::Pubkey>,
    redemption_vault: Option<solana_pubkey::Pubkey>,
    redemption_destination: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl RedeemAllTokensBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn redeemer(&mut self, redeemer: solana_pubkey::Pubkey) -> &mut Self {
        self.redeemer = Some(redeemer);
        self
    }
    #[inline(always)]
    pub fn source_authority(&mut self, source_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.source_authority = Some(source_authority);
        self
    }
    #[inline(always)]
    pub fn iou_mint(&mut self, iou_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.iou_mint = Some(iou_mint);
        self
    }
    #[inline(always)]
    pub fn iou_source(&mut self, iou_source: solana_pubkey::Pubkey) -> &mut Self {
        self.iou_source = Some(iou_source);
        self
    }
    #[inline(always)]
    pub fn redemption_vault(&mut self, redemption_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.redemption_vault = Some(redemption_vault);
        self
    }
    #[inline(always)]
    pub fn redemption_destination(
        &mut self,
        redemption_destination: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.redemption_destination = Some(redemption_destination);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = RedeemAllTokens {
            redeemer: self.redeemer.expect("redeemer is not set"),
            source_authority: self.source_authority.expect("source_authority is not set"),
            iou_mint: self.iou_mint.expect("iou_mint is not set"),
            iou_source: self.iou_source.expect("iou_source is not set"),
            redemption_vault: self.redemption_vault.expect("redemption_vault is not set"),
            redemption_destination: self
                .redemption_destination
                .expect("redemption_destination is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `redeem_all_tokens` CPI accounts.
pub struct RedeemAllTokensCpiAccounts<'a, 'b> {
    pub redeemer: &'b solana_account_info::AccountInfo<'a>,

    pub source_authority: &'b solana_account_info::AccountInfo<'a>,

    pub iou_mint: &'b solana_account_info::AccountInfo<'a>,

    pub iou_source: &'b solana_account_info::AccountInfo<'a>,

    pub redemption_vault: &'b solana_account_info::AccountInfo<'a>,

    pub redemption_destination: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `redeem_all_tokens` CPI instruction.
pub struct RedeemAllTokensCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub redeemer: &'b solana_account_info::AccountInfo<'a>,

    pub source_authority: &'b solana_account_info::AccountInfo<'a>,

    pub iou_mint: &'b solana_account_info::AccountInfo<'a>,

    pub iou_source: &'b solana_account_info::AccountInfo<'a>,

    pub redemption_vault: &'b solana_account_info::AccountInfo<'a>,

    pub redemption_destination: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> RedeemAllTokensCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: RedeemAllTokensCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            redeemer: accounts.redeemer,
            source_authority: accounts.source_authority,
            iou_mint: accounts.iou_mint,
            iou_source: accounts.iou_source,
            redemption_vault: accounts.redemption_vault,
            redemption_destination: accounts.redemption_destination,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.redeemer.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.source_authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.iou_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.iou_source.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.redemption_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.redemption_destination.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&RedeemAllTokensInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_REDEEMER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.redeemer.clone());
        account_infos.push(self.source_authority.clone());
        account_infos.push(self.iou_mint.clone());
        account_infos.push(self.iou_source.clone());
        account_infos.push(self.redemption_vault.clone());
        account_infos.push(self.redemption_destination.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `RedeemAllTokens` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` redeemer
///   1. `[signer]` source_authority
///   2. `[writable]` iou_mint
///   3. `[writable]` iou_source
///   4. `[writable]` redemption_vault
///   5. `[writable]` redemption_destination
///   6. `[]` token_program
#[derive(Clone, Debug)]
pub struct RedeemAllTokensCpiBuilder<'a, 'b> {
    instruction: Box<RedeemAllTokensCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RedeemAllTokensCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(RedeemAllTokensCpiBuilderInstruction {
            __program: program,
            redeemer: None,
            source_authority: None,
            iou_mint: None,
            iou_source: None,
            redemption_vault: None,
            redemption_destination: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn redeemer(&mut self, redeemer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.redeemer = Some(redeemer);
        self
    }
    #[inline(always)]
    pub fn source_authority(
        &mut self,
        source_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_authority = Some(source_authority);
        self
    }
    #[inline(always)]
    pub fn iou_mint(&mut self, iou_mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.iou_mint = Some(iou_mint);
        self
    }
    #[inline(always)]
    pub fn iou_source(
        &mut self,
        iou_source: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.iou_source = Some(iou_source);
        self
    }
    #[inline(always)]
    pub fn redemption_vault(
        &mut self,
        redemption_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.redemption_vault = Some(redemption_vault);
        self
    }
    #[inline(always)]
    pub fn redemption_destination(
        &mut self,
        redemption_destination: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.redemption_destination = Some(redemption_destination);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = RedeemAllTokensCpi {
            __program: self.instruction.__program,

            redeemer: self.instruction.redeemer.expect("redeemer is not set"),

            source_authority: self
                .instruction
                .source_authority
                .expect("source_authority is not set"),

            iou_mint: self.instruction.iou_mint.expect("iou_mint is not set"),

            iou_source: self.instruction.iou_source.expect("iou_source is not set"),

            redemption_vault: self
                .instruction
                .redemption_vault
                .expect("redemption_vault is not set"),

            redemption_destination: self
                .instruction
                .redemption_destination
                .expect("redemption_destination is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct RedeemAllTokensCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    redeemer: Option<&'b solana_account_info::AccountInfo<'a>>,
    source_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    iou_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    iou_source: Option<&'b solana_account_info::AccountInfo<'a>>,
    redemption_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    redemption_destination: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
