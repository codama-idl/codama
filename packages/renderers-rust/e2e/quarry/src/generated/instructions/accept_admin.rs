//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const ACCEPT_ADMIN_DISCRIMINATOR: [u8; 8] = [112, 42, 45, 90, 116, 181, 13, 170];

/// Accounts.
#[derive(Debug)]
pub struct AcceptAdmin {
    pub mint_wrapper: solana_pubkey::Pubkey,

    pub pending_admin: solana_pubkey::Pubkey,
}

impl AcceptAdmin {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            self.mint_wrapper,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.pending_admin,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&AcceptAdminInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::QUARRY_MINT_WRAPPER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AcceptAdminInstructionData {
    discriminator: [u8; 8],
}

impl AcceptAdminInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [112, 42, 45, 90, 116, 181, 13, 170],
        }
    }
}

impl Default for AcceptAdminInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `AcceptAdmin`.
///
/// ### Accounts:
///
///   0. `[writable]` mint_wrapper
///   1. `[signer]` pending_admin
#[derive(Clone, Debug, Default)]
pub struct AcceptAdminBuilder {
    mint_wrapper: Option<solana_pubkey::Pubkey>,
    pending_admin: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl AcceptAdminBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn mint_wrapper(&mut self, mint_wrapper: solana_pubkey::Pubkey) -> &mut Self {
        self.mint_wrapper = Some(mint_wrapper);
        self
    }
    #[inline(always)]
    pub fn pending_admin(&mut self, pending_admin: solana_pubkey::Pubkey) -> &mut Self {
        self.pending_admin = Some(pending_admin);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = AcceptAdmin {
            mint_wrapper: self.mint_wrapper.expect("mint_wrapper is not set"),
            pending_admin: self.pending_admin.expect("pending_admin is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `accept_admin` CPI accounts.
pub struct AcceptAdminCpiAccounts<'a, 'b> {
    pub mint_wrapper: &'b solana_account_info::AccountInfo<'a>,

    pub pending_admin: &'b solana_account_info::AccountInfo<'a>,
}

/// `accept_admin` CPI instruction.
pub struct AcceptAdminCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub mint_wrapper: &'b solana_account_info::AccountInfo<'a>,

    pub pending_admin: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> AcceptAdminCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: AcceptAdminCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            mint_wrapper: accounts.mint_wrapper,
            pending_admin: accounts.pending_admin,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.mint_wrapper.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.pending_admin.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&AcceptAdminInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_MINT_WRAPPER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.mint_wrapper.clone());
        account_infos.push(self.pending_admin.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AcceptAdmin` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` mint_wrapper
///   1. `[signer]` pending_admin
#[derive(Clone, Debug)]
pub struct AcceptAdminCpiBuilder<'a, 'b> {
    instruction: Box<AcceptAdminCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AcceptAdminCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AcceptAdminCpiBuilderInstruction {
            __program: program,
            mint_wrapper: None,
            pending_admin: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn mint_wrapper(
        &mut self,
        mint_wrapper: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_wrapper = Some(mint_wrapper);
        self
    }
    #[inline(always)]
    pub fn pending_admin(
        &mut self,
        pending_admin: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pending_admin = Some(pending_admin);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = AcceptAdminCpi {
            __program: self.instruction.__program,

            mint_wrapper: self
                .instruction
                .mint_wrapper
                .expect("mint_wrapper is not set"),

            pending_admin: self
                .instruction
                .pending_admin
                .expect("pending_admin is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct AcceptAdminCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    mint_wrapper: Option<&'b solana_account_info::AccountInfo<'a>>,
    pending_admin: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
