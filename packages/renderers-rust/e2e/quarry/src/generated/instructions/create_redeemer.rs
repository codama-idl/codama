//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const CREATE_REDEEMER_DISCRIMINATOR: [u8; 8] = [137, 228, 81, 63, 209, 33, 131, 195];

/// Accounts.
#[derive(Debug)]
pub struct CreateRedeemer {
    pub redeemer: solana_pubkey::Pubkey,

    pub iou_mint: solana_pubkey::Pubkey,

    pub redemption_mint: solana_pubkey::Pubkey,

    pub payer: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl CreateRedeemer {
    pub fn instruction(
        &self,
        args: CreateRedeemerInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateRedeemerInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.redeemer, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.iou_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.redemption_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateRedeemerInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::QUARRY_REDEEMER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateRedeemerInstructionData {
    discriminator: [u8; 8],
}

impl CreateRedeemerInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [137, 228, 81, 63, 209, 33, 131, 195],
        }
    }
}

impl Default for CreateRedeemerInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateRedeemerInstructionArgs {
    pub bump: u8,
}

/// Instruction builder for `CreateRedeemer`.
///
/// ### Accounts:
///
///   0. `[writable]` redeemer
///   1. `[]` iou_mint
///   2. `[]` redemption_mint
///   3. `[writable, signer]` payer
///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CreateRedeemerBuilder {
    redeemer: Option<solana_pubkey::Pubkey>,
    iou_mint: Option<solana_pubkey::Pubkey>,
    redemption_mint: Option<solana_pubkey::Pubkey>,
    payer: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    bump: Option<u8>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CreateRedeemerBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn redeemer(&mut self, redeemer: solana_pubkey::Pubkey) -> &mut Self {
        self.redeemer = Some(redeemer);
        self
    }
    #[inline(always)]
    pub fn iou_mint(&mut self, iou_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.iou_mint = Some(iou_mint);
        self
    }
    #[inline(always)]
    pub fn redemption_mint(&mut self, redemption_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.redemption_mint = Some(redemption_mint);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.bump = Some(bump);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CreateRedeemer {
            redeemer: self.redeemer.expect("redeemer is not set"),
            iou_mint: self.iou_mint.expect("iou_mint is not set"),
            redemption_mint: self.redemption_mint.expect("redemption_mint is not set"),
            payer: self.payer.expect("payer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };
        let args = CreateRedeemerInstructionArgs {
            bump: self.bump.clone().expect("bump is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_redeemer` CPI accounts.
pub struct CreateRedeemerCpiAccounts<'a, 'b> {
    pub redeemer: &'b solana_account_info::AccountInfo<'a>,

    pub iou_mint: &'b solana_account_info::AccountInfo<'a>,

    pub redemption_mint: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `create_redeemer` CPI instruction.
pub struct CreateRedeemerCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub redeemer: &'b solana_account_info::AccountInfo<'a>,

    pub iou_mint: &'b solana_account_info::AccountInfo<'a>,

    pub redemption_mint: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateRedeemerInstructionArgs,
}

impl<'a, 'b> CreateRedeemerCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CreateRedeemerCpiAccounts<'a, 'b>,
        args: CreateRedeemerInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            redeemer: accounts.redeemer,
            iou_mint: accounts.iou_mint,
            redemption_mint: accounts.redemption_mint,
            payer: accounts.payer,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.redeemer.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.iou_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.redemption_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateRedeemerInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_REDEEMER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.redeemer.clone());
        account_infos.push(self.iou_mint.clone());
        account_infos.push(self.redemption_mint.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateRedeemer` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` redeemer
///   1. `[]` iou_mint
///   2. `[]` redemption_mint
///   3. `[writable, signer]` payer
///   4. `[]` system_program
#[derive(Clone, Debug)]
pub struct CreateRedeemerCpiBuilder<'a, 'b> {
    instruction: Box<CreateRedeemerCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateRedeemerCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateRedeemerCpiBuilderInstruction {
            __program: program,
            redeemer: None,
            iou_mint: None,
            redemption_mint: None,
            payer: None,
            system_program: None,
            bump: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn redeemer(&mut self, redeemer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.redeemer = Some(redeemer);
        self
    }
    #[inline(always)]
    pub fn iou_mint(&mut self, iou_mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.iou_mint = Some(iou_mint);
        self
    }
    #[inline(always)]
    pub fn redemption_mint(
        &mut self,
        redemption_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.redemption_mint = Some(redemption_mint);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.instruction.bump = Some(bump);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = CreateRedeemerInstructionArgs {
            bump: self.instruction.bump.clone().expect("bump is not set"),
        };
        let instruction = CreateRedeemerCpi {
            __program: self.instruction.__program,

            redeemer: self.instruction.redeemer.expect("redeemer is not set"),

            iou_mint: self.instruction.iou_mint.expect("iou_mint is not set"),

            redemption_mint: self
                .instruction
                .redemption_mint
                .expect("redemption_mint is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateRedeemerCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    redeemer: Option<&'b solana_account_info::AccountInfo<'a>>,
    iou_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    redemption_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    bump: Option<u8>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
