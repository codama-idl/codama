//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const MINTER_UPDATE_DISCRIMINATOR: [u8; 8] = [11, 219, 68, 245, 38, 222, 221, 184];

/// Accounts.
#[derive(Debug)]
pub struct MinterUpdate {
    pub mint_wrapper: solana_pubkey::Pubkey,

    pub admin: solana_pubkey::Pubkey,

    pub minter: solana_pubkey::Pubkey,
}

impl MinterUpdate {
    pub fn instruction(
        &self,
        args: MinterUpdateInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: MinterUpdateInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            self.mint_wrapper,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.admin, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.minter, false));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&MinterUpdateInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::QUARRY_MINT_WRAPPER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MinterUpdateInstructionData {
    discriminator: [u8; 8],
}

impl MinterUpdateInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [11, 219, 68, 245, 38, 222, 221, 184],
        }
    }
}

impl Default for MinterUpdateInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MinterUpdateInstructionArgs {
    pub allowance: u64,
}

/// Instruction builder for `MinterUpdate`.
///
/// ### Accounts:
///
///   0. `[writable]` mint_wrapper
///   1. `[signer]` admin
///   2. `[writable]` minter
#[derive(Clone, Debug, Default)]
pub struct MinterUpdateBuilder {
    mint_wrapper: Option<solana_pubkey::Pubkey>,
    admin: Option<solana_pubkey::Pubkey>,
    minter: Option<solana_pubkey::Pubkey>,
    allowance: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl MinterUpdateBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn mint_wrapper(&mut self, mint_wrapper: solana_pubkey::Pubkey) -> &mut Self {
        self.mint_wrapper = Some(mint_wrapper);
        self
    }
    #[inline(always)]
    pub fn admin(&mut self, admin: solana_pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }
    #[inline(always)]
    pub fn minter(&mut self, minter: solana_pubkey::Pubkey) -> &mut Self {
        self.minter = Some(minter);
        self
    }
    #[inline(always)]
    pub fn allowance(&mut self, allowance: u64) -> &mut Self {
        self.allowance = Some(allowance);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = MinterUpdate {
            mint_wrapper: self.mint_wrapper.expect("mint_wrapper is not set"),
            admin: self.admin.expect("admin is not set"),
            minter: self.minter.expect("minter is not set"),
        };
        let args = MinterUpdateInstructionArgs {
            allowance: self.allowance.clone().expect("allowance is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `minter_update` CPI accounts.
pub struct MinterUpdateCpiAccounts<'a, 'b> {
    pub mint_wrapper: &'b solana_account_info::AccountInfo<'a>,

    pub admin: &'b solana_account_info::AccountInfo<'a>,

    pub minter: &'b solana_account_info::AccountInfo<'a>,
}

/// `minter_update` CPI instruction.
pub struct MinterUpdateCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub mint_wrapper: &'b solana_account_info::AccountInfo<'a>,

    pub admin: &'b solana_account_info::AccountInfo<'a>,

    pub minter: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: MinterUpdateInstructionArgs,
}

impl<'a, 'b> MinterUpdateCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: MinterUpdateCpiAccounts<'a, 'b>,
        args: MinterUpdateInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            mint_wrapper: accounts.mint_wrapper,
            admin: accounts.admin,
            minter: accounts.minter,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.mint_wrapper.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.admin.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.minter.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&MinterUpdateInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_MINT_WRAPPER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.mint_wrapper.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.minter.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MinterUpdate` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` mint_wrapper
///   1. `[signer]` admin
///   2. `[writable]` minter
#[derive(Clone, Debug)]
pub struct MinterUpdateCpiBuilder<'a, 'b> {
    instruction: Box<MinterUpdateCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MinterUpdateCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MinterUpdateCpiBuilderInstruction {
            __program: program,
            mint_wrapper: None,
            admin: None,
            minter: None,
            allowance: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn mint_wrapper(
        &mut self,
        mint_wrapper: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_wrapper = Some(mint_wrapper);
        self
    }
    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }
    #[inline(always)]
    pub fn minter(&mut self, minter: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.minter = Some(minter);
        self
    }
    #[inline(always)]
    pub fn allowance(&mut self, allowance: u64) -> &mut Self {
        self.instruction.allowance = Some(allowance);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = MinterUpdateInstructionArgs {
            allowance: self
                .instruction
                .allowance
                .clone()
                .expect("allowance is not set"),
        };
        let instruction = MinterUpdateCpi {
            __program: self.instruction.__program,

            mint_wrapper: self
                .instruction
                .mint_wrapper
                .expect("mint_wrapper is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            minter: self.instruction.minter.expect("minter is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct MinterUpdateCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    mint_wrapper: Option<&'b solana_account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_account_info::AccountInfo<'a>>,
    minter: Option<&'b solana_account_info::AccountInfo<'a>>,
    allowance: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
