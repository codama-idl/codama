//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const NEW_REWARDER_DISCRIMINATOR: [u8; 8] = [1, 115, 16, 244, 109, 74, 67, 209];

/// Accounts.
#[derive(Debug)]
pub struct NewRewarder {
    pub base: solana_pubkey::Pubkey,

    pub rewarder: solana_pubkey::Pubkey,

    pub initial_authority: solana_pubkey::Pubkey,

    pub payer: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub unused_account: solana_pubkey::Pubkey,

    pub mint_wrapper: solana_pubkey::Pubkey,

    pub rewards_token_mint: solana_pubkey::Pubkey,

    pub claim_fee_token_account: solana_pubkey::Pubkey,
}

impl NewRewarder {
    pub fn instruction(&self, args: NewRewarderInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: NewRewarderInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.base, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.rewarder, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.initial_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.unused_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.mint_wrapper,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rewards_token_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.claim_fee_token_account,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&NewRewarderInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::QUARRY_MINE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct NewRewarderInstructionData {
    discriminator: [u8; 8],
}

impl NewRewarderInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [1, 115, 16, 244, 109, 74, 67, 209],
        }
    }
}

impl Default for NewRewarderInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct NewRewarderInstructionArgs {
    pub bump: u8,
}

/// Instruction builder for `NewRewarder`.
///
/// ### Accounts:
///
///   0. `[signer]` base
///   1. `[writable]` rewarder
///   2. `[]` initial_authority
///   3. `[writable, signer]` payer
///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   5. `[]` unused_account
///   6. `[]` mint_wrapper
///   7. `[]` rewards_token_mint
///   8. `[]` claim_fee_token_account
#[derive(Clone, Debug, Default)]
pub struct NewRewarderBuilder {
    base: Option<solana_pubkey::Pubkey>,
    rewarder: Option<solana_pubkey::Pubkey>,
    initial_authority: Option<solana_pubkey::Pubkey>,
    payer: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    unused_account: Option<solana_pubkey::Pubkey>,
    mint_wrapper: Option<solana_pubkey::Pubkey>,
    rewards_token_mint: Option<solana_pubkey::Pubkey>,
    claim_fee_token_account: Option<solana_pubkey::Pubkey>,
    bump: Option<u8>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl NewRewarderBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn base(&mut self, base: solana_pubkey::Pubkey) -> &mut Self {
        self.base = Some(base);
        self
    }
    #[inline(always)]
    pub fn rewarder(&mut self, rewarder: solana_pubkey::Pubkey) -> &mut Self {
        self.rewarder = Some(rewarder);
        self
    }
    #[inline(always)]
    pub fn initial_authority(&mut self, initial_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.initial_authority = Some(initial_authority);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn unused_account(&mut self, unused_account: solana_pubkey::Pubkey) -> &mut Self {
        self.unused_account = Some(unused_account);
        self
    }
    #[inline(always)]
    pub fn mint_wrapper(&mut self, mint_wrapper: solana_pubkey::Pubkey) -> &mut Self {
        self.mint_wrapper = Some(mint_wrapper);
        self
    }
    #[inline(always)]
    pub fn rewards_token_mint(&mut self, rewards_token_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.rewards_token_mint = Some(rewards_token_mint);
        self
    }
    #[inline(always)]
    pub fn claim_fee_token_account(
        &mut self,
        claim_fee_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.claim_fee_token_account = Some(claim_fee_token_account);
        self
    }
    #[inline(always)]
    pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.bump = Some(bump);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = NewRewarder {
            base: self.base.expect("base is not set"),
            rewarder: self.rewarder.expect("rewarder is not set"),
            initial_authority: self
                .initial_authority
                .expect("initial_authority is not set"),
            payer: self.payer.expect("payer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            unused_account: self.unused_account.expect("unused_account is not set"),
            mint_wrapper: self.mint_wrapper.expect("mint_wrapper is not set"),
            rewards_token_mint: self
                .rewards_token_mint
                .expect("rewards_token_mint is not set"),
            claim_fee_token_account: self
                .claim_fee_token_account
                .expect("claim_fee_token_account is not set"),
        };
        let args = NewRewarderInstructionArgs {
            bump: self.bump.clone().expect("bump is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `new_rewarder` CPI accounts.
pub struct NewRewarderCpiAccounts<'a, 'b> {
    pub base: &'b solana_account_info::AccountInfo<'a>,

    pub rewarder: &'b solana_account_info::AccountInfo<'a>,

    pub initial_authority: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub unused_account: &'b solana_account_info::AccountInfo<'a>,

    pub mint_wrapper: &'b solana_account_info::AccountInfo<'a>,

    pub rewards_token_mint: &'b solana_account_info::AccountInfo<'a>,

    pub claim_fee_token_account: &'b solana_account_info::AccountInfo<'a>,
}

/// `new_rewarder` CPI instruction.
pub struct NewRewarderCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub base: &'b solana_account_info::AccountInfo<'a>,

    pub rewarder: &'b solana_account_info::AccountInfo<'a>,

    pub initial_authority: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub unused_account: &'b solana_account_info::AccountInfo<'a>,

    pub mint_wrapper: &'b solana_account_info::AccountInfo<'a>,

    pub rewards_token_mint: &'b solana_account_info::AccountInfo<'a>,

    pub claim_fee_token_account: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: NewRewarderInstructionArgs,
}

impl<'a, 'b> NewRewarderCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: NewRewarderCpiAccounts<'a, 'b>,
        args: NewRewarderInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            base: accounts.base,
            rewarder: accounts.rewarder,
            initial_authority: accounts.initial_authority,
            payer: accounts.payer,
            system_program: accounts.system_program,
            unused_account: accounts.unused_account,
            mint_wrapper: accounts.mint_wrapper,
            rewards_token_mint: accounts.rewards_token_mint,
            claim_fee_token_account: accounts.claim_fee_token_account,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.base.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.rewarder.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.initial_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.unused_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.mint_wrapper.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rewards_token_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.claim_fee_token_account.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&NewRewarderInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_MINE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.base.clone());
        account_infos.push(self.rewarder.clone());
        account_infos.push(self.initial_authority.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.unused_account.clone());
        account_infos.push(self.mint_wrapper.clone());
        account_infos.push(self.rewards_token_mint.clone());
        account_infos.push(self.claim_fee_token_account.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `NewRewarder` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` base
///   1. `[writable]` rewarder
///   2. `[]` initial_authority
///   3. `[writable, signer]` payer
///   4. `[]` system_program
///   5. `[]` unused_account
///   6. `[]` mint_wrapper
///   7. `[]` rewards_token_mint
///   8. `[]` claim_fee_token_account
#[derive(Clone, Debug)]
pub struct NewRewarderCpiBuilder<'a, 'b> {
    instruction: Box<NewRewarderCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> NewRewarderCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(NewRewarderCpiBuilderInstruction {
            __program: program,
            base: None,
            rewarder: None,
            initial_authority: None,
            payer: None,
            system_program: None,
            unused_account: None,
            mint_wrapper: None,
            rewards_token_mint: None,
            claim_fee_token_account: None,
            bump: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn base(&mut self, base: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.base = Some(base);
        self
    }
    #[inline(always)]
    pub fn rewarder(&mut self, rewarder: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rewarder = Some(rewarder);
        self
    }
    #[inline(always)]
    pub fn initial_authority(
        &mut self,
        initial_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.initial_authority = Some(initial_authority);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn unused_account(
        &mut self,
        unused_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.unused_account = Some(unused_account);
        self
    }
    #[inline(always)]
    pub fn mint_wrapper(
        &mut self,
        mint_wrapper: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_wrapper = Some(mint_wrapper);
        self
    }
    #[inline(always)]
    pub fn rewards_token_mint(
        &mut self,
        rewards_token_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rewards_token_mint = Some(rewards_token_mint);
        self
    }
    #[inline(always)]
    pub fn claim_fee_token_account(
        &mut self,
        claim_fee_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.claim_fee_token_account = Some(claim_fee_token_account);
        self
    }
    #[inline(always)]
    pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.instruction.bump = Some(bump);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = NewRewarderInstructionArgs {
            bump: self.instruction.bump.clone().expect("bump is not set"),
        };
        let instruction = NewRewarderCpi {
            __program: self.instruction.__program,

            base: self.instruction.base.expect("base is not set"),

            rewarder: self.instruction.rewarder.expect("rewarder is not set"),

            initial_authority: self
                .instruction
                .initial_authority
                .expect("initial_authority is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            unused_account: self
                .instruction
                .unused_account
                .expect("unused_account is not set"),

            mint_wrapper: self
                .instruction
                .mint_wrapper
                .expect("mint_wrapper is not set"),

            rewards_token_mint: self
                .instruction
                .rewards_token_mint
                .expect("rewards_token_mint is not set"),

            claim_fee_token_account: self
                .instruction
                .claim_fee_token_account
                .expect("claim_fee_token_account is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct NewRewarderCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    base: Option<&'b solana_account_info::AccountInfo<'a>>,
    rewarder: Option<&'b solana_account_info::AccountInfo<'a>>,
    initial_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    unused_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    mint_wrapper: Option<&'b solana_account_info::AccountInfo<'a>>,
    rewards_token_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    claim_fee_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    bump: Option<u8>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
