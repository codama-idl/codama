//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const RESCUE_TOKENS_M_M_DISCRIMINATOR: [u8; 8] = [222, 81, 199, 209, 182, 62, 62, 186];

/// Accounts.
#[derive(Debug)]
pub struct RescueTokensMM {
    pub mm_owner: solana_pubkey::Pubkey,

    pub merge_pool: solana_pubkey::Pubkey,

    pub mm: solana_pubkey::Pubkey,

    pub miner: solana_pubkey::Pubkey,

    pub miner_token_account: solana_pubkey::Pubkey,

    pub destination_token_account: solana_pubkey::Pubkey,

    pub quarry_mine_program: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,
}

impl RescueTokensMM {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.mm_owner,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.merge_pool,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.mm, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.miner, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.miner_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.destination_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.quarry_mine_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&RescueTokensMMInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::QUARRY_MERGE_MINE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RescueTokensMMInstructionData {
    discriminator: [u8; 8],
}

impl RescueTokensMMInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [222, 81, 199, 209, 182, 62, 62, 186],
        }
    }
}

impl Default for RescueTokensMMInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `RescueTokensMM`.
///
/// ### Accounts:
///
///   0. `[signer]` mm_owner
///   1. `[]` merge_pool
///   2. `[]` mm
///   3. `[]` miner
///   4. `[writable]` miner_token_account
///   5. `[writable]` destination_token_account
///   6. `[optional]` quarry_mine_program (default to `QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB`)
///   7. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct RescueTokensMMBuilder {
    mm_owner: Option<solana_pubkey::Pubkey>,
    merge_pool: Option<solana_pubkey::Pubkey>,
    mm: Option<solana_pubkey::Pubkey>,
    miner: Option<solana_pubkey::Pubkey>,
    miner_token_account: Option<solana_pubkey::Pubkey>,
    destination_token_account: Option<solana_pubkey::Pubkey>,
    quarry_mine_program: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl RescueTokensMMBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn mm_owner(&mut self, mm_owner: solana_pubkey::Pubkey) -> &mut Self {
        self.mm_owner = Some(mm_owner);
        self
    }
    #[inline(always)]
    pub fn merge_pool(&mut self, merge_pool: solana_pubkey::Pubkey) -> &mut Self {
        self.merge_pool = Some(merge_pool);
        self
    }
    #[inline(always)]
    pub fn mm(&mut self, mm: solana_pubkey::Pubkey) -> &mut Self {
        self.mm = Some(mm);
        self
    }
    #[inline(always)]
    pub fn miner(&mut self, miner: solana_pubkey::Pubkey) -> &mut Self {
        self.miner = Some(miner);
        self
    }
    #[inline(always)]
    pub fn miner_token_account(&mut self, miner_token_account: solana_pubkey::Pubkey) -> &mut Self {
        self.miner_token_account = Some(miner_token_account);
        self
    }
    #[inline(always)]
    pub fn destination_token_account(
        &mut self,
        destination_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.destination_token_account = Some(destination_token_account);
        self
    }
    /// `[optional account, default to 'QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB']`
    #[inline(always)]
    pub fn quarry_mine_program(&mut self, quarry_mine_program: solana_pubkey::Pubkey) -> &mut Self {
        self.quarry_mine_program = Some(quarry_mine_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = RescueTokensMM {
            mm_owner: self.mm_owner.expect("mm_owner is not set"),
            merge_pool: self.merge_pool.expect("merge_pool is not set"),
            mm: self.mm.expect("mm is not set"),
            miner: self.miner.expect("miner is not set"),
            miner_token_account: self
                .miner_token_account
                .expect("miner_token_account is not set"),
            destination_token_account: self
                .destination_token_account
                .expect("destination_token_account is not set"),
            quarry_mine_program: self.quarry_mine_program.unwrap_or(solana_pubkey::pubkey!(
                "QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB"
            )),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `rescue_tokens_m_m` CPI accounts.
pub struct RescueTokensMMCpiAccounts<'a, 'b> {
    pub mm_owner: &'b solana_account_info::AccountInfo<'a>,

    pub merge_pool: &'b solana_account_info::AccountInfo<'a>,

    pub mm: &'b solana_account_info::AccountInfo<'a>,

    pub miner: &'b solana_account_info::AccountInfo<'a>,

    pub miner_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub destination_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub quarry_mine_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `rescue_tokens_m_m` CPI instruction.
pub struct RescueTokensMMCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub mm_owner: &'b solana_account_info::AccountInfo<'a>,

    pub merge_pool: &'b solana_account_info::AccountInfo<'a>,

    pub mm: &'b solana_account_info::AccountInfo<'a>,

    pub miner: &'b solana_account_info::AccountInfo<'a>,

    pub miner_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub destination_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub quarry_mine_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> RescueTokensMMCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: RescueTokensMMCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            mm_owner: accounts.mm_owner,
            merge_pool: accounts.merge_pool,
            mm: accounts.mm,
            miner: accounts.miner,
            miner_token_account: accounts.miner_token_account,
            destination_token_account: accounts.destination_token_account,
            quarry_mine_program: accounts.quarry_mine_program,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.mm_owner.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.merge_pool.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.mm.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.miner.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.miner_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.destination_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.quarry_mine_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&RescueTokensMMInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_MERGE_MINE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.mm_owner.clone());
        account_infos.push(self.merge_pool.clone());
        account_infos.push(self.mm.clone());
        account_infos.push(self.miner.clone());
        account_infos.push(self.miner_token_account.clone());
        account_infos.push(self.destination_token_account.clone());
        account_infos.push(self.quarry_mine_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `RescueTokensMM` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` mm_owner
///   1. `[]` merge_pool
///   2. `[]` mm
///   3. `[]` miner
///   4. `[writable]` miner_token_account
///   5. `[writable]` destination_token_account
///   6. `[]` quarry_mine_program
///   7. `[]` token_program
#[derive(Clone, Debug)]
pub struct RescueTokensMMCpiBuilder<'a, 'b> {
    instruction: Box<RescueTokensMMCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RescueTokensMMCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(RescueTokensMMCpiBuilderInstruction {
            __program: program,
            mm_owner: None,
            merge_pool: None,
            mm: None,
            miner: None,
            miner_token_account: None,
            destination_token_account: None,
            quarry_mine_program: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn mm_owner(&mut self, mm_owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mm_owner = Some(mm_owner);
        self
    }
    #[inline(always)]
    pub fn merge_pool(
        &mut self,
        merge_pool: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.merge_pool = Some(merge_pool);
        self
    }
    #[inline(always)]
    pub fn mm(&mut self, mm: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mm = Some(mm);
        self
    }
    #[inline(always)]
    pub fn miner(&mut self, miner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.miner = Some(miner);
        self
    }
    #[inline(always)]
    pub fn miner_token_account(
        &mut self,
        miner_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.miner_token_account = Some(miner_token_account);
        self
    }
    #[inline(always)]
    pub fn destination_token_account(
        &mut self,
        destination_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination_token_account = Some(destination_token_account);
        self
    }
    #[inline(always)]
    pub fn quarry_mine_program(
        &mut self,
        quarry_mine_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quarry_mine_program = Some(quarry_mine_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = RescueTokensMMCpi {
            __program: self.instruction.__program,

            mm_owner: self.instruction.mm_owner.expect("mm_owner is not set"),

            merge_pool: self.instruction.merge_pool.expect("merge_pool is not set"),

            mm: self.instruction.mm.expect("mm is not set"),

            miner: self.instruction.miner.expect("miner is not set"),

            miner_token_account: self
                .instruction
                .miner_token_account
                .expect("miner_token_account is not set"),

            destination_token_account: self
                .instruction
                .destination_token_account
                .expect("destination_token_account is not set"),

            quarry_mine_program: self
                .instruction
                .quarry_mine_program
                .expect("quarry_mine_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct RescueTokensMMCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    mm_owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    merge_pool: Option<&'b solana_account_info::AccountInfo<'a>>,
    mm: Option<&'b solana_account_info::AccountInfo<'a>>,
    miner: Option<&'b solana_account_info::AccountInfo<'a>>,
    miner_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    destination_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    quarry_mine_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
