//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const EXTRACT_FEES_DISCRIMINATOR: [u8; 8] = [57, 219, 44, 55, 130, 127, 165, 183];

/// Accounts.
#[derive(Debug)]
pub struct ExtractFees {
    pub rewarder: solana_pubkey::Pubkey,

    pub claim_fee_token_account: solana_pubkey::Pubkey,

    pub fee_to_token_account: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,
}

impl ExtractFees {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rewarder,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.claim_fee_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.fee_to_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&ExtractFeesInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::QUARRY_MINE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ExtractFeesInstructionData {
    discriminator: [u8; 8],
}

impl ExtractFeesInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [57, 219, 44, 55, 130, 127, 165, 183],
        }
    }
}

impl Default for ExtractFeesInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `ExtractFees`.
///
/// ### Accounts:
///
///   0. `[]` rewarder
///   1. `[writable]` claim_fee_token_account
///   2. `[writable]` fee_to_token_account
///   3. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct ExtractFeesBuilder {
    rewarder: Option<solana_pubkey::Pubkey>,
    claim_fee_token_account: Option<solana_pubkey::Pubkey>,
    fee_to_token_account: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ExtractFeesBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn rewarder(&mut self, rewarder: solana_pubkey::Pubkey) -> &mut Self {
        self.rewarder = Some(rewarder);
        self
    }
    #[inline(always)]
    pub fn claim_fee_token_account(
        &mut self,
        claim_fee_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.claim_fee_token_account = Some(claim_fee_token_account);
        self
    }
    #[inline(always)]
    pub fn fee_to_token_account(
        &mut self,
        fee_to_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_to_token_account = Some(fee_to_token_account);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = ExtractFees {
            rewarder: self.rewarder.expect("rewarder is not set"),
            claim_fee_token_account: self
                .claim_fee_token_account
                .expect("claim_fee_token_account is not set"),
            fee_to_token_account: self
                .fee_to_token_account
                .expect("fee_to_token_account is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `extract_fees` CPI accounts.
pub struct ExtractFeesCpiAccounts<'a, 'b> {
    pub rewarder: &'b solana_account_info::AccountInfo<'a>,

    pub claim_fee_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub fee_to_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `extract_fees` CPI instruction.
pub struct ExtractFeesCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub rewarder: &'b solana_account_info::AccountInfo<'a>,

    pub claim_fee_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub fee_to_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> ExtractFeesCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: ExtractFeesCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            rewarder: accounts.rewarder,
            claim_fee_token_account: accounts.claim_fee_token_account,
            fee_to_token_account: accounts.fee_to_token_account,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rewarder.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.claim_fee_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.fee_to_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&ExtractFeesInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_MINE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.rewarder.clone());
        account_infos.push(self.claim_fee_token_account.clone());
        account_infos.push(self.fee_to_token_account.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ExtractFees` via CPI.
///
/// ### Accounts:
///
///   0. `[]` rewarder
///   1. `[writable]` claim_fee_token_account
///   2. `[writable]` fee_to_token_account
///   3. `[]` token_program
#[derive(Clone, Debug)]
pub struct ExtractFeesCpiBuilder<'a, 'b> {
    instruction: Box<ExtractFeesCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ExtractFeesCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ExtractFeesCpiBuilderInstruction {
            __program: program,
            rewarder: None,
            claim_fee_token_account: None,
            fee_to_token_account: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn rewarder(&mut self, rewarder: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rewarder = Some(rewarder);
        self
    }
    #[inline(always)]
    pub fn claim_fee_token_account(
        &mut self,
        claim_fee_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.claim_fee_token_account = Some(claim_fee_token_account);
        self
    }
    #[inline(always)]
    pub fn fee_to_token_account(
        &mut self,
        fee_to_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_to_token_account = Some(fee_to_token_account);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = ExtractFeesCpi {
            __program: self.instruction.__program,

            rewarder: self.instruction.rewarder.expect("rewarder is not set"),

            claim_fee_token_account: self
                .instruction
                .claim_fee_token_account
                .expect("claim_fee_token_account is not set"),

            fee_to_token_account: self
                .instruction
                .fee_to_token_account
                .expect("fee_to_token_account is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ExtractFeesCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    rewarder: Option<&'b solana_account_info::AccountInfo<'a>>,
    claim_fee_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    fee_to_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
