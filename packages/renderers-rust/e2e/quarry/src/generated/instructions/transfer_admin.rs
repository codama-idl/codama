//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const TRANSFER_ADMIN_DISCRIMINATOR: [u8; 8] = [42, 242, 66, 106, 228, 10, 111, 156];

/// Accounts.
#[derive(Debug)]
pub struct TransferAdmin {
    pub mint_wrapper: solana_pubkey::Pubkey,

    pub admin: solana_pubkey::Pubkey,

    pub next_admin: solana_pubkey::Pubkey,
}

impl TransferAdmin {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            self.mint_wrapper,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.admin, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.next_admin,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&TransferAdminInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::QUARRY_MINT_WRAPPER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TransferAdminInstructionData {
    discriminator: [u8; 8],
}

impl TransferAdminInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [42, 242, 66, 106, 228, 10, 111, 156],
        }
    }
}

impl Default for TransferAdminInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `TransferAdmin`.
///
/// ### Accounts:
///
///   0. `[writable]` mint_wrapper
///   1. `[signer]` admin
///   2. `[]` next_admin
#[derive(Clone, Debug, Default)]
pub struct TransferAdminBuilder {
    mint_wrapper: Option<solana_pubkey::Pubkey>,
    admin: Option<solana_pubkey::Pubkey>,
    next_admin: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl TransferAdminBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn mint_wrapper(&mut self, mint_wrapper: solana_pubkey::Pubkey) -> &mut Self {
        self.mint_wrapper = Some(mint_wrapper);
        self
    }
    #[inline(always)]
    pub fn admin(&mut self, admin: solana_pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }
    #[inline(always)]
    pub fn next_admin(&mut self, next_admin: solana_pubkey::Pubkey) -> &mut Self {
        self.next_admin = Some(next_admin);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = TransferAdmin {
            mint_wrapper: self.mint_wrapper.expect("mint_wrapper is not set"),
            admin: self.admin.expect("admin is not set"),
            next_admin: self.next_admin.expect("next_admin is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `transfer_admin` CPI accounts.
pub struct TransferAdminCpiAccounts<'a, 'b> {
    pub mint_wrapper: &'b solana_account_info::AccountInfo<'a>,

    pub admin: &'b solana_account_info::AccountInfo<'a>,

    pub next_admin: &'b solana_account_info::AccountInfo<'a>,
}

/// `transfer_admin` CPI instruction.
pub struct TransferAdminCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub mint_wrapper: &'b solana_account_info::AccountInfo<'a>,

    pub admin: &'b solana_account_info::AccountInfo<'a>,

    pub next_admin: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> TransferAdminCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: TransferAdminCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            mint_wrapper: accounts.mint_wrapper,
            admin: accounts.admin,
            next_admin: accounts.next_admin,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.mint_wrapper.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.admin.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.next_admin.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&TransferAdminInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::QUARRY_MINT_WRAPPER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.mint_wrapper.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.next_admin.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `TransferAdmin` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` mint_wrapper
///   1. `[signer]` admin
///   2. `[]` next_admin
#[derive(Clone, Debug)]
pub struct TransferAdminCpiBuilder<'a, 'b> {
    instruction: Box<TransferAdminCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> TransferAdminCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(TransferAdminCpiBuilderInstruction {
            __program: program,
            mint_wrapper: None,
            admin: None,
            next_admin: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn mint_wrapper(
        &mut self,
        mint_wrapper: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_wrapper = Some(mint_wrapper);
        self
    }
    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }
    #[inline(always)]
    pub fn next_admin(
        &mut self,
        next_admin: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.next_admin = Some(next_admin);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = TransferAdminCpi {
            __program: self.instruction.__program,

            mint_wrapper: self
                .instruction
                .mint_wrapper
                .expect("mint_wrapper is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            next_admin: self.instruction.next_admin.expect("next_admin is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct TransferAdminCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    mint_wrapper: Option<&'b solana_account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_account_info::AccountInfo<'a>>,
    next_admin: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
