//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const EXECUTE_DISCRIMINATOR: [u8; 8] = [105, 37, 101, 197, 75, 251, 102, 26];

/// Accounts.
#[derive(Debug)]
pub struct Execute {
    pub source_account: solana_pubkey::Pubkey,

    pub mint: solana_pubkey::Pubkey,

    pub destination_account: solana_pubkey::Pubkey,

    pub owner_delegate: solana_pubkey::Pubkey,

    pub extra_metas_account: solana_pubkey::Pubkey,

    pub guard: solana_pubkey::Pubkey,

    pub instruction_sysvar_account: solana_pubkey::Pubkey,
}

impl Execute {
    pub fn instruction(&self, args: ExecuteInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: ExecuteInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.source_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.mint, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.destination_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owner_delegate,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.extra_metas_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.guard, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.instruction_sysvar_account,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&ExecuteInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::WEN_TRANSFER_GUARD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ExecuteInstructionData {
    discriminator: [u8; 8],
}

impl ExecuteInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [105, 37, 101, 197, 75, 251, 102, 26],
        }
    }
}

impl Default for ExecuteInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ExecuteInstructionArgs {
    pub amount: u64,
}

/// Instruction builder for `Execute`.
///
/// ### Accounts:
///
///   0. `[]` source_account
///   1. `[]` mint
///   2. `[]` destination_account
///   3. `[]` owner_delegate
///   4. `[]` extra_metas_account
///   5. `[]` guard
///   6. `[optional]` instruction_sysvar_account (default to `Sysvar1nstructions1111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct ExecuteBuilder {
    source_account: Option<solana_pubkey::Pubkey>,
    mint: Option<solana_pubkey::Pubkey>,
    destination_account: Option<solana_pubkey::Pubkey>,
    owner_delegate: Option<solana_pubkey::Pubkey>,
    extra_metas_account: Option<solana_pubkey::Pubkey>,
    guard: Option<solana_pubkey::Pubkey>,
    instruction_sysvar_account: Option<solana_pubkey::Pubkey>,
    amount: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ExecuteBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn source_account(&mut self, source_account: solana_pubkey::Pubkey) -> &mut Self {
        self.source_account = Some(source_account);
        self
    }
    #[inline(always)]
    pub fn mint(&mut self, mint: solana_pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }
    #[inline(always)]
    pub fn destination_account(&mut self, destination_account: solana_pubkey::Pubkey) -> &mut Self {
        self.destination_account = Some(destination_account);
        self
    }
    #[inline(always)]
    pub fn owner_delegate(&mut self, owner_delegate: solana_pubkey::Pubkey) -> &mut Self {
        self.owner_delegate = Some(owner_delegate);
        self
    }
    #[inline(always)]
    pub fn extra_metas_account(&mut self, extra_metas_account: solana_pubkey::Pubkey) -> &mut Self {
        self.extra_metas_account = Some(extra_metas_account);
        self
    }
    #[inline(always)]
    pub fn guard(&mut self, guard: solana_pubkey::Pubkey) -> &mut Self {
        self.guard = Some(guard);
        self
    }
    /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
    #[inline(always)]
    pub fn instruction_sysvar_account(
        &mut self,
        instruction_sysvar_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.instruction_sysvar_account = Some(instruction_sysvar_account);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = Execute {
            source_account: self.source_account.expect("source_account is not set"),
            mint: self.mint.expect("mint is not set"),
            destination_account: self
                .destination_account
                .expect("destination_account is not set"),
            owner_delegate: self.owner_delegate.expect("owner_delegate is not set"),
            extra_metas_account: self
                .extra_metas_account
                .expect("extra_metas_account is not set"),
            guard: self.guard.expect("guard is not set"),
            instruction_sysvar_account: self.instruction_sysvar_account.unwrap_or(
                solana_pubkey::pubkey!("Sysvar1nstructions1111111111111111111111111"),
            ),
        };
        let args = ExecuteInstructionArgs {
            amount: self.amount.clone().expect("amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `execute` CPI accounts.
pub struct ExecuteCpiAccounts<'a, 'b> {
    pub source_account: &'b solana_account_info::AccountInfo<'a>,

    pub mint: &'b solana_account_info::AccountInfo<'a>,

    pub destination_account: &'b solana_account_info::AccountInfo<'a>,

    pub owner_delegate: &'b solana_account_info::AccountInfo<'a>,

    pub extra_metas_account: &'b solana_account_info::AccountInfo<'a>,

    pub guard: &'b solana_account_info::AccountInfo<'a>,

    pub instruction_sysvar_account: &'b solana_account_info::AccountInfo<'a>,
}

/// `execute` CPI instruction.
pub struct ExecuteCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub source_account: &'b solana_account_info::AccountInfo<'a>,

    pub mint: &'b solana_account_info::AccountInfo<'a>,

    pub destination_account: &'b solana_account_info::AccountInfo<'a>,

    pub owner_delegate: &'b solana_account_info::AccountInfo<'a>,

    pub extra_metas_account: &'b solana_account_info::AccountInfo<'a>,

    pub guard: &'b solana_account_info::AccountInfo<'a>,

    pub instruction_sysvar_account: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: ExecuteInstructionArgs,
}

impl<'a, 'b> ExecuteCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: ExecuteCpiAccounts<'a, 'b>,
        args: ExecuteInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            source_account: accounts.source_account,
            mint: accounts.mint,
            destination_account: accounts.destination_account,
            owner_delegate: accounts.owner_delegate,
            extra_metas_account: accounts.extra_metas_account,
            guard: accounts.guard,
            instruction_sysvar_account: accounts.instruction_sysvar_account,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.source_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.destination_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owner_delegate.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.extra_metas_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.guard.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.instruction_sysvar_account.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&ExecuteInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::WEN_TRANSFER_GUARD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.source_account.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.destination_account.clone());
        account_infos.push(self.owner_delegate.clone());
        account_infos.push(self.extra_metas_account.clone());
        account_infos.push(self.guard.clone());
        account_infos.push(self.instruction_sysvar_account.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Execute` via CPI.
///
/// ### Accounts:
///
///   0. `[]` source_account
///   1. `[]` mint
///   2. `[]` destination_account
///   3. `[]` owner_delegate
///   4. `[]` extra_metas_account
///   5. `[]` guard
///   6. `[]` instruction_sysvar_account
#[derive(Clone, Debug)]
pub struct ExecuteCpiBuilder<'a, 'b> {
    instruction: Box<ExecuteCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ExecuteCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ExecuteCpiBuilderInstruction {
            __program: program,
            source_account: None,
            mint: None,
            destination_account: None,
            owner_delegate: None,
            extra_metas_account: None,
            guard: None,
            instruction_sysvar_account: None,
            amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn source_account(
        &mut self,
        source_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_account = Some(source_account);
        self
    }
    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }
    #[inline(always)]
    pub fn destination_account(
        &mut self,
        destination_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination_account = Some(destination_account);
        self
    }
    #[inline(always)]
    pub fn owner_delegate(
        &mut self,
        owner_delegate: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.owner_delegate = Some(owner_delegate);
        self
    }
    #[inline(always)]
    pub fn extra_metas_account(
        &mut self,
        extra_metas_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.extra_metas_account = Some(extra_metas_account);
        self
    }
    #[inline(always)]
    pub fn guard(&mut self, guard: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.guard = Some(guard);
        self
    }
    #[inline(always)]
    pub fn instruction_sysvar_account(
        &mut self,
        instruction_sysvar_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.instruction_sysvar_account = Some(instruction_sysvar_account);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = ExecuteInstructionArgs {
            amount: self.instruction.amount.clone().expect("amount is not set"),
        };
        let instruction = ExecuteCpi {
            __program: self.instruction.__program,

            source_account: self
                .instruction
                .source_account
                .expect("source_account is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            destination_account: self
                .instruction
                .destination_account
                .expect("destination_account is not set"),

            owner_delegate: self
                .instruction
                .owner_delegate
                .expect("owner_delegate is not set"),

            extra_metas_account: self
                .instruction
                .extra_metas_account
                .expect("extra_metas_account is not set"),

            guard: self.instruction.guard.expect("guard is not set"),

            instruction_sysvar_account: self
                .instruction
                .instruction_sysvar_account
                .expect("instruction_sysvar_account is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ExecuteCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    source_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    destination_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    owner_delegate: Option<&'b solana_account_info::AccountInfo<'a>>,
    extra_metas_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    guard: Option<&'b solana_account_info::AccountInfo<'a>>,
    instruction_sysvar_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
